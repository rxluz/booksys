{"version":3,"sources":["common/components/warning/something-wrong.svg","modules/main/background.png","modules/main/logo.svg","common/components/warning/email.svg","common/components/companyCard/companyCardBackground.png","enhancers/monitorReducer.js","common/utils/state.utils.js","reducers/settings.js","reducers/company.js","reducers/booking.js","reducers/index.js","reducers/configureStore.js","common/utils/general.constants.js","common/utils/general.utils.js","common/components/input/Input.js","common/components/input/index.js","common/components/button/Button.js","common/components/button/index.js","modules/booking/create/Create.constants.js","common/components/warning/index.js","common/components/warning/Warning.js","modules/booking/create/Create.page.js","modules/booking/create/Create.services.js","modules/company/Company.actions.js","modules/company/Company.constants.js","modules/booking/create/Create.js","modules/booking/Booking.constants.js","modules/booking/Booking.services.js","modules/booking/Booking.actions.js","modules/booking/status/Status.page.js","common/components/officeCard/index.js","common/components/officeCard/OfficeCard.js","common/components/pagination/index.js","common/components/pagination/Pagination.js","modules/booking/change/Change.page.js","modules/booking/Booking.js","common/routes/RoutesList.js","common/utils/browser.utils.js","modules/main/BodyClasses.js","modules/company/Company.services.js","common/components/companyCard/index.js","common/components/companyCard/CompanyCard.js","modules/company/Company.page.js","modules/company/Company.js","modules/main/Main.js","serviceWorker.js","index.js","common/locales/translations.js"],"names":["module","exports","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","state","action","number","start","performance","now","newState","end","diff","Math","round","console","log","setSelector","selectors","defaultState","type","name","value","dispatch","SETTINGS_TOGGLE_DARK_MODE","darkMode","SET_COMPANY_DATA","currentState","SET_COMPANY_STATUS","status","event","eventStartTime","eventEndTime","address","availableTimes","acceptedDomains","shouldRefresh","SET_BOOKING_STATUS","SET_BOOKING_DATA","corporateEmail","seats","office","time","id","combineReducers","settings","company","booking","i18nState","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","EMAIL_VALIDATION","BASE_URL","onChangeValue","cb","isValid","valueForced","target","isTouched","setFieldInitialState","validate","translate","EMAIL","test","email","generalConstants","String","toLowerCase","message","getPreferredTimeData","availableTimesAndSeats","reduce","times","moment","unix","hour","format","push","text","validateEmail","emailAddress","some","domain","split","getSeatsList","preferredTime","seatsDict","map","seat","num","getSeatsByTime","ValidationMessage","displayErrors","validation","role","className","size","Input","title","placeholder","onChange","isValidOuter","list","disabled","showClearButton","onClear","onBlur","emptyValue","INPUT_ELEMENT","select","onClick","selected","innerValue","htmlFor","defaultProps","Button","children","isDisabled","PAGE_STATE","BOOKING_REQUEST_URL","Warning","image","imageAlt","description","footerMessage","callToActionText","callToActionType","onClickCallToAction","alt","src","CreatePageWrapper","CreatePage","onSubmit","isSubmitting","showSuccessState","showInvalidBookingMessage","resetFormAction","pageState","createConstants","getPageState","useState","generalUtils","setName","setCorporateEmail","setSeats","setPreferredTime","fields","fieldsValue","Object","keys","fieldsVal","field","isSubmitButtonDisabled","values","every","isFormValid","resetFormActionInner","PAGES_BY_STATE","EmailImg","SomethingWrongImg","requestBooking","a","data","companyHash","fetch","method","headers","body","qs","stringify","setCompanyData","setCompanyStatus","STATUS","Create","t","useParams","setIsSubmitting","setShowSuccessState","setShowInvalidBookingMessage","createServices","result","StatusCodes","NOT_FOUND","companyConstants","setTimeout","contextTypes","PropTypes","connect","bindActionCreators","companyActions","withRouter","BOOKING_STATUS","LOCKED","OK","PRECONDITION_FAILED","BOOKING_CONFIRM_URL","BOOKING_CANCEL_URL","confirmBooking","bookingId","bookingConstants","cancelBooking","setBookingStatus","setBookingData","Message","Title","Time","Office","Seats","CancelButton","onCancel","processing","Status","onNewBooking","isCancelled","code","OfficeCard","onBook","Pagination","current","total","onPageChange","Change","page","setPage","resetPage","seatsAndTimes","seatsAndTime","forEach","index","hash","availableTimesAndSeatsFinal","timeAndSeats","seatsFinal","filter","filterAvailableSeatsAndTimes","totalRecords","length","totalPages","displayPaginator","items","itemsPerPage","slice","Booking","history","setProcessing","getBookingData","bookingServices","then","response","json","useEffect","statusPage","window","confirm","isRequired","bookingActions","RoutesList","path","exact","isDarkMode","matchMedia","matches","document","addMobileDesktopClasses","classList","add","isMobile","tablet","BodyClasses","props","useSelector","isDarkModeCheck","remove","addDarkModeClasses","normalise","join","detect","version","os","addBrowserClasses","getCompanyData","CompanyCard","style","backgroundImage","CompanyCardBackground","href","CompanyPage","INTERNAL_PAGES","loading","loaded","failed","expired","Company","setPageState","updateCompanyData","NEW_PAGE_STATUS","prevStatus","companyServices","newStatus","React","Main","_props","BackgroundImg","LogoImg","Boolean","location","hostname","match","preloadedState","middlewares","process","thunkMiddleware","enhancers","applyMiddleware","monitorReducersEnhancer","composedEnhancers","compose","store","persistor","persistStore","configureStore","ReactDOM","render","StrictMode","translations","en","options","plural_rule","plural_number","initialLang","detectBrowserLanguage","fallbackLang","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.08b8464b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/something-wrong.19763570.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.9adfa93a.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.e29d4d3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/email.90faf953.svg\";","module.exports = __webpack_public_path__ + \"static/media/companyCardBackground.b2695cc6.png\";","const round = (number) => Math.round(number * 100) / 100;\n\nconst monitorReducerEnhancer = (createStore) => (\n  reducer,\n  initialState,\n  enhancer\n) => {\n  const monitoredReducer = (state, action) => {\n    const start = performance.now();\n    const newState = reducer(state, action);\n    const end = performance.now();\n    const diff = round(end - start);\n\n    console.log(\"reducer process time:\", diff);\n\n    return newState;\n  };\n\n  return createStore(monitoredReducer, initialState, enhancer);\n};\n\nexport default monitorReducerEnhancer;\n","export const setSelector = (selectors, defaultState = {}) => (state = defaultState, action) =>\n  selectors(state)[action.type] ? selectors(state)[action.type](state, action) : state\n\nexport const action = (name) => (value = '') => (dispatch) =>\n  dispatch({\n    type: name,\n    value,\n  })\n","import { setSelector } from 'common/utils/state.utils'\n\nconst defaultSettings = () => ({\n  darkMode: 'browser',\n})\n\nconst list = (state) => ({\n  SETTINGS_TOGGLE_DARK_MODE: () => ({ ...state, darkMode: !state.darkMode }),\n})\n\nexport default setSelector(list, defaultSettings())\n","import { setSelector } from 'common/utils/state.utils'\n\nconst defaultSettings = () => ({\n  event: {\n    name: '',\n    eventStartTime: '',\n    eventEndTime: '',\n    address: '',\n    availableTimes: [],\n  },\n  acceptedDomains: [],\n  shouldRefresh: true,\n})\n\nconst list = () => ({\n  SET_COMPANY_DATA: (currentState, action) => {\n    return { ...currentState, ...action.value }\n  },\n  SET_COMPANY_STATUS: (currentState, action) => {\n    return { ...currentState, status: action.value }\n  },\n})\n\nexport default setSelector(list, defaultSettings())\n","import { setSelector } from 'common/utils/state.utils'\n\nconst defaultSettings = () => ({\n  name: '',\n  corporateEmail: '',\n  seats: 0,\n  office: '',\n  time: '',\n  status: 'loading',\n  id: '',\n})\n\nconst list = () => ({\n  SET_BOOKING_STATUS: (currentState, action) => {\n    return { ...currentState, status: action.value }\n  },\n  SET_BOOKING_DATA: (currentState, action) => {\n    return { ...currentState, ...action.value }\n  },\n})\n\nexport default setSelector(list, defaultSettings())\n","import { i18nState } from 'redux-i18n'\nimport { combineReducers } from 'redux'\n\nimport settings from './settings'\nimport company from './company'\nimport booking from './booking'\n\nexport default combineReducers({\n  settings,\n  company,\n  booking,\n  i18nState,\n})\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport monitorReducersEnhancer from 'enhancers/monitorReducer'\nimport loggerMiddleware from 'middleware/logger'\nimport rootReducer from '.'\n\nconst persistConfig = {\n  key: 'settings',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [\n    process.env.NODE_ENV === 'development' && loggerMiddleware,\n    thunkMiddleware,\n  ].filter(Boolean)\n\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const addReduxDevtoolsInDevMode =\n    process.env.NODE_ENV === 'development' &&\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__()\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer, addReduxDevtoolsInDevMode].filter(\n    Boolean,\n  )\n  const composedEnhancers = compose(...enhancers)\n\n  let store = createStore(persistedReducer, preloadedState, composedEnhancers)\n\n  let persistor = persistStore(store)\n\n  return { store, persistor }\n}\n","export const EMAIL_VALIDATION = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport const BASE_URL = 'https://29b0050b-7001-4162-994f-acfec6195274.mock.pstmn.io'\n\nexport const MOMENT_DAY_MONTH = 'Do MMM | ddd'\nexport const MOMENT_TIME = 'h A'\n\nconst GOOGLE_MAPS_URL = 'https://www.google.com/maps/search/'\n\nexport const MAPS_URL = (address) => `${GOOGLE_MAPS_URL}${address}`\n","import * as generalConstants from './general.constants'\nimport moment from 'moment'\nimport hash from 'object-hash'\n\nexport const emptyFunc = (param) => param\n\nexport const onChangeValue = (cb, isValid, valueForced = 'NO') => (event) =>\n  cb({\n    value: valueForced !== 'NO' ? valueForced : event.target.value,\n    isValid,\n    isTouched: false,\n  })\n\nexport const setFieldInitialState = (isValid = true, value = '') => ({\n  value,\n  isValid,\n  isTouched: false,\n})\n\nconst validate = (translate) => ({\n  EMAIL: {\n    test: (email) => generalConstants.EMAIL_VALIDATION.test(String(email).toLowerCase()),\n    message: () => translate('Your email looks incorrect'),\n  },\n})\n\nexport const getPreferredTimeData = (availableTimesAndSeats) =>\n  (availableTimesAndSeats || []).reduce(\n    (times, { time }) => {\n      const now = moment().unix()\n      if (now > time) {\n        return times\n      }\n\n      const hour = moment.unix(time).format(generalConstants.MOMENT_TIME)\n\n      times.push({\n        value: time,\n        text: hour,\n      })\n\n      return times\n    },\n\n    [],\n  )\n\nexport const getSeatsAndTime = (availableTimesAndSeats) =>\n  availableTimesAndSeats.reduce(\n    (seatsAndTime, { time, seats }) => {\n      seats.forEach((seat, index) => {\n        seatsAndTime.push({\n          id: hash({ seat, time, index }),\n          seat,\n          time,\n        })\n      })\n\n      return seatsAndTime\n    },\n\n    [],\n  )\n\nexport const getSeatsByTime = (availableTimesAndSeats, translate) =>\n  availableTimesAndSeats.reduce(\n    (seatsDict, { time, seats }) => {\n      seatsDict[time] = seats.map((seat) => ({\n        value: seat,\n        text: translate([`One seat`, `{num} seats`], { num: seat }),\n      }))\n\n      return seatsDict\n    },\n\n    {},\n  )\n\nexport const validateEmail = (translate, acceptedDomains) => ({\n  test: (emailAddress) =>\n    validate(translate).EMAIL.test(emailAddress) &&\n    acceptedDomains.some((domain) => emailAddress.split('@')[1] === domain),\n  message: (emailAddress) =>\n    !validate(translate).EMAIL.test(emailAddress)\n      ? validate(translate).EMAIL.message(emailAddress)\n      : translate('This email is not acceptable, please make sure to use your corporate email'),\n})\n\nexport const getSeatsList = ({ preferredTime, availableTimesAndSeats, translate }) =>\n  preferredTime.value ? getSeatsByTime(availableTimesAndSeats, translate)[preferredTime.value] : []\n\nexport const filterByPage = ({ items, itemsPerPage, page }) =>\n  items.slice((page - 1) * itemsPerPage, page * itemsPerPage)\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\nimport { onChangeValue } from 'common/utils/general.utils'\nimport './Input.scss'\nimport { AiOutlineWarning } from 'react-icons/ai'\nimport { BiX } from 'react-icons/bi'\n\nconst ValidationMessage = ({ displayErrors, isValid, validation, value }) => {\n  if (!validation) {\n    return null\n  }\n\n  return (\n    displayErrors &&\n    !isValid && (\n      <aside role=\"alert\" className=\"animate__animated animate__fadeIn input__warning\">\n        <i className=\"input__warning--icon\">\n          <AiOutlineWarning size=\"16px\" />\n        </i>\n        <p className=\"input__warning--text\">{validation.message(value)}</p>\n      </aside>\n    )\n  )\n}\n\nconst Input = ({\n  title,\n  type,\n  id,\n  placeholder,\n  value,\n  displayErrors,\n  onChange,\n  isValid: isValidOuter,\n  validation,\n  list,\n  disabled,\n  showClearButton,\n  onClear,\n}) => {\n  const isValid = !!validation ? validation.test(value) : !!isValidOuter\n  const onBlur = () => onChange({ value, isValid, isTouched: value !== '' })\n\n  const emptyValue = () => {\n    onChangeValue(onChange, isValid, '')()\n    onClear && onClear()\n  }\n\n  const INPUT_ELEMENT = {\n    text: () => (\n      <input\n        id={id}\n        disabled={disabled}\n        onChange={onChangeValue(onChange, isValid)}\n        onBlur={onBlur}\n        value={value}\n        className=\"input__element--text\"\n        placeholder={placeholder}\n      />\n    ),\n    select: () => (\n      <>\n        {!disabled && value !== '' && showClearButton && (\n          <div className=\"input__element--clear\" onClick={emptyValue}>\n            <BiX />\n          </div>\n        )}\n        <select\n          id={id}\n          disabled={disabled}\n          onChange={onChangeValue(onChange, isValid)}\n          className=\"input__element--select\"\n        >\n          {!!placeholder && (\n            <option selected={value === ''} disabled>\n              {placeholder}\n            </option>\n          )}\n          {list &&\n            list.map(({ value: innerValue, text }) => (\n              <option selected={value === innerValue} key={innerValue} value={innerValue}>\n                {text}\n              </option>\n            ))}\n        </select>\n      </>\n    ),\n  }\n\n  return (\n    <div className=\"input\">\n      {!!title && (\n        <label className=\"input__title\" htmlFor={id}>\n          {title}\n        </label>\n      )}\n\n      {INPUT_ELEMENT[type] && INPUT_ELEMENT[type]()}\n      <ValidationMessage\n        displayErrors={displayErrors}\n        isValid={isValid}\n        validation={validation}\n        value={value}\n      />\n    </div>\n  )\n}\n\nInput.defaultProps = {\n  type: 'input',\n  isValid: true,\n  displayErrors: true,\n  list: [],\n}\n\nInput.propTypes = {\n  title: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  isValid: PropTypes.bool,\n  displayErrors: PropTypes.bool,\n  disabled: PropTypes.bool,\n  validation: PropTypes.object,\n  list: PropTypes.array,\n}\n\nexport default Input\n","import Input from './Input'\n\nexport * from './Input'\nexport default Input\n","import React from 'react'\n\nimport './Button.scss'\n\nconst Button = ({ children, isDisabled, onClick, type }) => (\n  <button\n    className={`button button--${type}`}\n    onClick={() => (!isDisabled ? onClick() : null)}\n    disabled={isDisabled}\n  >\n    {children}\n  </button>\n)\n\nButton.defaultProps = {\n  type: 'primary',\n}\n\nexport default Button\n","import Button from './Button'\n\nexport * from './Button'\nexport default Button\n","import * as generalConstants from 'common/utils/general.constants'\n\nexport const PAGE_STATE = {\n  LOADING: 'loading',\n  EXPIRED: 'expired',\n  FORM: 'form',\n  SUCCESS: 'success',\n}\n\nexport const BOOKING_REQUEST_URL = `${generalConstants.BASE_URL}/booking/request`\n","import Warning from './Warning'\n\nexport * from './Warning'\nexport default Warning\n","import React from 'react'\n\nimport Button from 'common/components/button'\nimport './Warning.scss'\n\nconst Warning = ({\n  image,\n  imageAlt,\n  title,\n  description,\n  footerMessage,\n  callToActionText,\n  callToActionType,\n  onClickCallToAction,\n}) => (\n  <div className=\"warning animate__animated animate__fadeIn\">\n    <div className=\"warning__content\">\n      {image && (\n        <div className=\"warning__image\">\n          <img alt={imageAlt} src={image} />\n        </div>\n      )}\n      {title && <div className=\"warning__title\">{title}</div>}\n      {description && <div className=\"warning__description\">{description}</div>}\n      {footerMessage && <div className=\"warning__footer-message\">{footerMessage}</div>}\n    </div>\n    {callToActionText && (\n      <div className=\"warning__footer\">\n        <Button\n          type={callToActionType}\n          className=\"warning__footer--button\"\n          onClick={onClickCallToAction}\n        >\n          {callToActionText}\n        </Button>\n      </div>\n    )}\n  </div>\n)\n\nexport default Warning\n","import React, { useState } from 'react'\nimport Input from 'common/components/input'\nimport Button from 'common/components/button'\nimport * as generalUtils from 'common/utils/general.utils'\nimport moment from 'moment'\nimport * as createConstants from './Create.constants'\nimport Warning from 'common/components/warning'\nimport SomethingWrongImg from 'common/components/warning/something-wrong.svg'\nimport EmailImg from 'common/components/warning/email.svg'\n\nimport './Create.scss'\n\nconst isFormValid = (fields) =>\n  Object.values(fields).every(({ value, isValid }) => !!value && isValid)\n\nconst getPageState = ({ eventEndTime, showSuccessState }) => {\n  const isEventExpired = eventEndTime < moment().unix()\n\n  if (isEventExpired) {\n    return createConstants.PAGE_STATE.EXPIRED\n  }\n\n  if (showSuccessState) {\n    return createConstants.PAGE_STATE.SUCCESS\n  }\n\n  return createConstants.PAGE_STATE.FORM\n}\n\nconst CreatePageWrapper = ({ children }) => (\n  <section className=\"create-page animate__animated animate__fadeIn\">{children}</section>\n)\n\nconst CreatePage = ({\n  translate,\n  availableTimesAndSeats,\n  acceptedDomains,\n  onSubmit,\n  isSubmitting,\n  eventEndTime,\n  showSuccessState,\n  showInvalidBookingMessage,\n  resetFormAction,\n}) => {\n  const pageState = getPageState({ showSuccessState, eventEndTime })\n  const [name, setName] = useState(generalUtils.setFieldInitialState())\n  const [corporateEmail, setCorporateEmail] = useState(generalUtils.setFieldInitialState())\n  const [seats, setSeats] = useState(generalUtils.setFieldInitialState())\n  const [preferredTime, setPreferredTime] = useState(generalUtils.setFieldInitialState())\n\n  const fields = { name, corporateEmail, seats, preferredTime }\n  const fieldsValue = Object.keys(fields).reduce((fieldsVal, field) => {\n    fieldsVal[field] = fields[field].value\n\n    return fieldsVal\n  }, {})\n\n  const isSubmitButtonDisabled = isSubmitting || !isFormValid(fields)\n\n  const resetFormActionInner = () => {\n    setSeats(generalUtils.setFieldInitialState())\n    setPreferredTime(generalUtils.setFieldInitialState())\n    resetFormAction()\n  }\n\n  const PAGES_BY_STATE = {\n    [createConstants.PAGE_STATE.SUCCESS]: () => (\n      <Warning\n        image={EmailImg}\n        imageAlt={translate('Email illustration')}\n        title={translate('Check your email')}\n        description={translate(\n          'You are almost there to reserve your room for this event! Please make sure to finish your reservation as soon as possible to avoid losing your booking.',\n        )}\n        footerMessage={translate(\"If you can't found the email, check your spam folder.\")}\n        callToActionType=\"secondary\"\n        callToActionText={translate('New booking')}\n        onClickCallToAction={resetFormActionInner}\n      />\n    ),\n    [createConstants.PAGE_STATE.LOADING]: () => <div>{translate('Loading...')}</div>,\n    [createConstants.PAGE_STATE.EXPIRED]: () => (\n      <Warning\n        image={SomethingWrongImg}\n        imageAlt={translate('Something wrong happened')}\n        title={translate('This event has ended')}\n      />\n    ),\n\n    [createConstants.PAGE_STATE.FORM]: () => (\n      <div className=\"animate__animated animate__fadeIn\">\n        <div className=\"create-page__title\">\n          {translate('Fill in the details below to make your office reservation')}\n        </div>\n        <div className=\"create-page__content\">\n          <Input\n            id=\"name\"\n            type=\"text\"\n            value={name.value}\n            onChange={setName}\n            title={translate('Name')}\n          />\n          <Input\n            id=\"corporateEmail\"\n            type=\"text\"\n            value={corporateEmail.value}\n            onChange={setCorporateEmail}\n            title={translate('Corporate email')}\n            displayErrors={corporateEmail.isTouched}\n            validation={generalUtils.validateEmail(translate, acceptedDomains)}\n            translate={translate}\n          />\n\n          <Input\n            id=\"preferredTime\"\n            title={translate('Book your preferences for this event')}\n            type=\"select\"\n            list={generalUtils.getPreferredTimeData(availableTimesAndSeats)}\n            value={preferredTime.value}\n            onChange={setPreferredTime}\n            placeholder={translate('Preferred time')}\n          />\n\n          <Input\n            id=\"seats\"\n            type=\"select\"\n            disabled={preferredTime.value === ''}\n            list={generalUtils.getSeatsList({ preferredTime, availableTimesAndSeats, translate })}\n            value={seats.value}\n            onChange={setSeats}\n            placeholder={translate('Number of seats')}\n            displayErrors={showInvalidBookingMessage}\n            validation={{\n              test: () => !showInvalidBookingMessage,\n              message: () => translate('Your booking preferences has changed'),\n            }}\n          />\n        </div>\n\n        <div className=\"create-page__footer\">\n          <Button\n            onClick={() => !isSubmitButtonDisabled && onSubmit(fieldsValue)}\n            isDisabled={isSubmitButtonDisabled}\n          >\n            {isSubmitting ? translate('Please wait ...') : translate('Continue')}\n          </Button>\n        </div>\n      </div>\n    ),\n  }\n\n  return <CreatePageWrapper>{PAGES_BY_STATE[pageState]()}</CreatePageWrapper>\n}\n\nexport default CreatePage\n","import * as createConstants from './Create.constants'\nimport qs from 'qs'\n\nexport const requestBooking = async ({ data, companyHash }) =>\n  fetch(createConstants.BOOKING_REQUEST_URL, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: qs.stringify({ ...data, companyHash }),\n  })\n","import { action } from 'common/utils/state.utils'\n\nexport const setCompanyData = action('SET_COMPANY_DATA')\nexport const setCompanyStatus = action('SET_COMPANY_STATUS')\n","import * as generalConstants from 'common/utils/general.constants'\n\nexport const COMPANY_DATA_URL = (companyHash) =>\n  `${generalConstants.BASE_URL}/company/${companyHash}`\n\nexport const PAGE_STATE = {\n  FAILED: 'failed',\n  LOADED: 'loaded',\n  LOADING: 'loading',\n  EXPIRED: 'expired',\n}\n\nexport const STATUS = {\n  OUTDATED: 'outdated',\n  SUCCESS: 'success',\n}\n","import React, { useState } from 'react'\nimport * as PropTypes from 'prop-types'\nimport CreatePage from './Create.page'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport * as createServices from './Create.services'\nimport * as companyActions from 'modules/company/Company.actions'\nimport * as companyConstants from 'modules/company/Company.constants'\nimport { StatusCodes } from 'http-status-codes'\n\nimport { useParams } from 'react-router-dom'\n\nconst Create = ({ company, setCompanyStatus }, { t: translate }) => {\n  const { companyHash } = useParams()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [showSuccessState, setShowSuccessState] = useState(false)\n  const [showInvalidBookingMessage, setShowInvalidBookingMessage] = useState(false)\n\n  const onSubmit = async (data) => {\n    setIsSubmitting(true)\n    const result = await createServices.requestBooking({ data, companyHash })\n    const { status } = result\n\n    if (status === StatusCodes.NOT_FOUND) {\n      setCompanyStatus(companyConstants.STATUS.OUTDATED)\n      setShowInvalidBookingMessage(true)\n      setIsSubmitting(false)\n\n      setTimeout(() => setShowInvalidBookingMessage(true), 3000)\n\n      return\n    }\n\n    setShowSuccessState(true)\n  }\n\n  const resetFormAction = () => {\n    setCompanyStatus(companyConstants.STATUS.OUTDATED)\n    setShowSuccessState(false)\n    setIsSubmitting(false)\n  }\n\n  return (\n    <CreatePage\n      translate={translate}\n      acceptedDomains={company.acceptedDomains}\n      eventStartTime={company.event.eventStartTime}\n      eventEndTime={company.event.eventEndTime}\n      availableTimesAndSeats={company.event.availableTimesAndSeats}\n      onSubmit={onSubmit}\n      isSubmitting={isSubmitting}\n      showInvalidBookingMessage={showInvalidBookingMessage}\n      showSuccessState={showSuccessState}\n      resetFormAction={resetFormAction}\n    />\n  )\n}\n\nCreate.propTypes = { company: PropTypes.object }\n\nCreate.contextTypes = {\n  t: PropTypes.func,\n}\n\nconst mapStateToProps = ({ company }) => ({\n  company,\n})\n\nconst mapDispatchToPros = (dispatch) =>\n  bindActionCreators(\n    {\n      setCompanyStatus: companyActions.setCompanyStatus,\n    },\n    dispatch,\n  )\n\nexport default connect(mapStateToProps, mapDispatchToPros)(withRouter(Create))\n","import * as generalConstants from 'common/utils/general.constants'\nimport { StatusCodes } from 'http-status-codes'\n\nexport const PAGE_STATE = {\n  LOADING: 'loading',\n  NOT_FOUND: 'notFound',\n  UNAVAILABLE: 'unavailable',\n  CANCELLED: 'cancelled',\n  CONFIRMED: 'confirmed',\n}\n\nexport const BOOKING_STATUS = {\n  [StatusCodes.NOT_FOUND]: PAGE_STATE.NOT_FOUND,\n  [StatusCodes.LOCKED]: PAGE_STATE.CANCELLED,\n  [StatusCodes.OK]: PAGE_STATE.CONFIRMED,\n  [StatusCodes.PRECONDITION_FAILED]: PAGE_STATE.UNAVAILABLE,\n}\n\nexport const STATUS_MESSAGES = (translate) => ({\n  [PAGE_STATE.CONFIRMED]: translate(\n    'Congratulations! Your reservation has been successfully confirmed. Here is a brief summary of your booking details:',\n  ),\n  [PAGE_STATE.CANCELLED]: translate(\n    'You cancelled your booking. Here is a brief summary of your cancelled booking details:',\n  ),\n})\n\nexport const STATUS_NAMES = (translate) => ({\n  [PAGE_STATE.CONFIRMED]: translate('Confirmed'),\n  [PAGE_STATE.CANCELLED]: translate('Cancelled'),\n})\n\nexport const BOOKING_CONFIRM_URL = `${generalConstants.BASE_URL}/booking/confirm`\nexport const BOOKING_CANCEL_URL = `${generalConstants.BASE_URL}/booking/cancel`\n","import * as bookingConstants from './Booking.constants'\nimport qs from 'qs'\n\nexport const confirmBooking = async ({ bookingId }) =>\n  fetch(bookingConstants.BOOKING_CONFIRM_URL, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: qs.stringify({ bookingId }),\n  })\n\nexport const cancelBooking = async ({ bookingId }) =>\n  fetch(bookingConstants.BOOKING_CANCEL_URL, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: qs.stringify({ bookingId }),\n  })\n","import { action } from 'common/utils/state.utils'\n\nexport const setBookingStatus = action('SET_BOOKING_STATUS')\nexport const setBookingData = action('SET_BOOKING_DATA')\n","import React from 'react'\nimport moment from 'moment'\nimport Button from 'common/components/button'\nimport './Status.scss'\nimport * as bookingConstants from '../Booking.constants'\n\nconst Message = ({ status, translate }) => {\n  const message = bookingConstants.STATUS_MESSAGES(translate)[status] || false\n\n  return message ? <div className=\"booking-status__message\">{message}</div> : null\n}\n\nconst Title = ({ status, translate }) => (\n  <div className={`booking-status__status--${status}`}>\n    {bookingConstants.STATUS_NAMES(translate)[status]}\n  </div>\n)\n\nconst Time = ({ time, translate }) => (\n  <div className=\"booking-status__row\">\n    <div className=\"booking-status__row--title\">{translate('Time')}</div>\n    <div className=\"booking-status__row--value\">{moment.unix(time).format('h A')}</div>\n  </div>\n)\n\nconst Office = ({ office, translate }) => (\n  <div className=\"booking-status__row\">\n    <div className=\"booking-status__row--title\">{translate('Office')}</div>\n    <div className=\"booking-status__row--value\">{office}</div>\n  </div>\n)\n\nconst Seats = ({ seats, translate }) => (\n  <div className=\"booking-status__row\">\n    <div className=\"booking-status__row--title\">{translate('Seats')}</div>\n    <div className=\"booking-status__row--value\">{seats}</div>\n  </div>\n)\n\nconst CancelButton = ({ onCancel, translate, processing }) => (\n  <div className=\"booking-status__row\">\n    <Button onClick={onCancel} type=\"secondary\" isDisabled={processing}>\n      {processing ? translate('Please wait ...') : translate('Cancel')}\n    </Button>\n  </div>\n)\n\nconst Status = ({ translate, data, onNewBooking, onCancel, processing }) => {\n  const isCancelled = data.status === bookingConstants.PAGE_STATE.CANCELLED\n\n  return (\n    <section className=\"booking-status animate__animated animate__fadeIn\">\n      <div className=\"booking-status__title\">{translate('Hey {name},', { name: data.name })}</div>\n      <Message status={data.status} translate={translate} />\n\n      <div className=\"booking-status__status\">\n        <Title status={data.status} translate={translate} />\n\n        <div className=\"booking-status__status--code\">\n          {translate('Reservation code: {code}', { code: data.id })}\n        </div>\n      </div>\n\n      {!isCancelled && (\n        <>\n          <Time time={data.time} translate={translate} />\n          <Seats seats={data.seats} translate={translate} />\n          <Office office={data.office} translate={translate} />\n        </>\n      )}\n\n      <div className=\"booking-status__row\">\n        <Button isDisabled={processing} onClick={onNewBooking} type=\"secondary\">\n          {translate('New booking')}\n        </Button>\n      </div>\n\n      {!isCancelled && (\n        <CancelButton processing={processing} translate={translate} onCancel={onCancel} />\n      )}\n    </section>\n  )\n}\n\nexport default Status\n","import OfficeCard from './OfficeCard'\n\nexport * from './OfficeCard'\nexport default OfficeCard\n","import React from 'react'\nimport moment from 'moment'\nimport * as generalConstants from 'common/utils/general.constants'\nimport { BiChair } from 'react-icons/bi'\nimport Button from 'common/components/button'\n\nimport './OfficeCard.scss'\n\nconst OfficeCard = ({ time, seat, onBook, translate }) => (\n  <div className=\"office-card animate__animated animate__fadeIn\">\n    <div className=\"office-card__content\">\n      <div className=\"office-card__time\">\n        {moment.unix(time).format(generalConstants.MOMENT_TIME)}\n      </div>\n      <div className=\"office-card__seats\">\n        <div className=\"office-card__seats--icon\">\n          <BiChair />\n        </div>\n        <div className=\"office-card__seats--text\">{seat}</div>\n      </div>\n    </div>\n    <div className=\"office-card__footer\">\n      <Button onClick={() => onBook({ seat, time })}>{translate('Book')}</Button>\n    </div>\n  </div>\n)\n\nexport default OfficeCard\n","import Pagination from './Pagination'\n\nexport * from './Pagination'\nexport default Pagination\n","import React from 'react'\nimport PaginationLib from 'react-responsive-pagination'\nimport './Pagination.scss'\n\nconst Pagination = ({ current, total, onPageChange }) => (\n  <PaginationLib current={current} total={total} onPageChange={onPageChange} />\n)\n\nexport default Pagination\n","import React, { useState } from 'react'\nimport Input from 'common/components/input'\nimport OfficeCard from 'common/components/officeCard'\nimport Pagination from 'common/components/pagination'\n\nimport './Change.scss'\nimport * as generalUtils from 'common/utils/general.utils'\n\nconst filterAvailableSeatsAndTimes = ({ seats, preferredTime, availableTimesAndSeats }) =>\n  availableTimesAndSeats.reduce((availableTimesAndSeatsFinal, timeAndSeats) => {\n    if (preferredTime.value != '' && preferredTime.value != timeAndSeats.time) {\n      return availableTimesAndSeatsFinal\n    }\n\n    const seatsFinal = timeAndSeats.seats.filter((seat) => {\n      if (preferredTime.value == '') {\n        return true\n      }\n\n      return seats.value == '' || seats.value == seat ? true : false\n    })\n\n    availableTimesAndSeatsFinal.push({\n      time: timeAndSeats.time,\n      seats: seatsFinal,\n    })\n\n    return availableTimesAndSeatsFinal\n  }, [])\n\nconst Change = ({ translate, event, onBook }) => {\n  const { availableTimesAndSeats } = event\n\n  const [seats, setSeats] = useState(generalUtils.setFieldInitialState())\n  const [preferredTime, setPreferredTime] = useState(generalUtils.setFieldInitialState())\n  const [page, setPage] = useState(1)\n\n  const resetPage = () => setPage(1)\n\n  const clearPreferredTime = () => {\n    setSeats(generalUtils.setFieldInitialState())\n    resetPage()\n  }\n\n  const setPreferredTimeInner = (value) => {\n    setPreferredTime(value)\n    setSeats(generalUtils.setFieldInitialState())\n    resetPage()\n  }\n\n  const setSeatsInner = (value) => {\n    setSeats(value)\n    resetPage()\n  }\n\n  const filteredAvailableTimesAndTimes = filterAvailableSeatsAndTimes({\n    seats,\n    preferredTime,\n    availableTimesAndSeats,\n  })\n\n  const seatsAndTimes = generalUtils.getSeatsAndTime(filteredAvailableTimesAndTimes)\n\n  const itemsPerPage = 6\n  const totalRecords = seatsAndTimes.length\n  const totalPages = totalRecords / itemsPerPage\n\n  const displayPaginator = totalRecords > itemsPerPage\n\n  return (\n    <section className=\"booking-change animate__animated animate__fadeIn\">\n      <div className=\"booking-change__title\">\n        {translate(\n          \"Unfortunately the time that you selected isn't available anymore. Please select a new option below\",\n        )}\n      </div>\n      <div className=\"booking-change__options\">\n        <div className=\"booking-change__column booking-change__column--left\">\n          <Input\n            type=\"select\"\n            id=\"booking-change-time\"\n            value={preferredTime.value}\n            onChange={setPreferredTimeInner}\n            showClearButton={true}\n            onClear={clearPreferredTime}\n            list={generalUtils.getPreferredTimeData(availableTimesAndSeats)}\n            placeholder={translate('Select a time')}\n          />\n        </div>\n        <div className=\"booking-change__column booking-change__column--right\">\n          <Input\n            type=\"select\"\n            disabled={preferredTime.value === ''}\n            value={seats.value}\n            onChange={setSeatsInner}\n            showClearButton={true}\n            id=\"booking-change-seats\"\n            list={generalUtils.getSeatsList({ preferredTime, availableTimesAndSeats, translate })}\n            placeholder={translate('Number of seats')}\n          />\n        </div>\n      </div>\n      <div className=\"booking-change__subtitle\">{translate('Available offices')}</div>\n      <div className=\"booking-change__content\">\n        {generalUtils\n          .filterByPage({ items: seatsAndTimes, page, itemsPerPage })\n          .map(({ id, seat, time }) => (\n            <OfficeCard key={id} seat={seat} time={time} translate={translate} onBook={onBook} />\n          ))}\n      </div>\n\n      {displayPaginator && (\n        <div className=\"booking-change__paginator\">\n          <Pagination current={page} total={totalPages} onPageChange={setPage} />\n        </div>\n      )}\n    </section>\n  )\n}\n\nexport default Change\n","/* This page will try to confirm the book,\n    and will return the booking details,\n    case it return that wasn't possible to confirm will redirect to the change page,\n    case the book return that was cancelled or confirm, it will redirect to the status page.\n\n    Also this page will add the book details in the store\n*/\n\nimport React, { useEffect, useState } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { useParams } from 'react-router-dom'\nimport * as PropTypes from 'prop-types'\nimport * as bookingServices from './Booking.services'\nimport * as bookingActions from './Booking.actions'\nimport * as bookingConstants from './Booking.constants'\nimport StatusPage from './status/Status.page'\nimport ChangePage from './change/Change.page'\nimport Warning from 'common/components/warning'\nimport SomethingWrongImg from 'common/components/warning/something-wrong.svg'\n\nconst Booking = (\n  { booking, setBookingStatus, setBookingData, history, company },\n  { t: translate },\n) => {\n  const { bookingId, companyHash } = useParams()\n  const [processing, setProcessing] = useState(false)\n\n  const getBookingData = () => {\n    bookingServices\n      .confirmBooking(bookingId)\n      .then((response) => {\n        setBookingStatus(bookingConstants.BOOKING_STATUS[response.status])\n        setProcessing(false)\n\n        return response.json()\n      })\n      .then((response) => {\n        if (response && response.booking) {\n          setBookingData(response.booking)\n        }\n      })\n  }\n\n  useEffect(() => {\n    getBookingData()\n  }, [bookingId])\n\n  const onNewBooking = () => history.push(`/${companyHash}`)\n\n  const onCancel = () => {\n    if (window.confirm(translate('Are you sure that you want to cancel your booking'))) {\n      setProcessing(true)\n      bookingServices.cancelBooking({ bookingId }).then(() => {\n        getBookingData()\n      })\n    }\n  }\n\n  const statusPage = (\n    <StatusPage\n      translate={translate}\n      data={booking}\n      processing={processing}\n      onCancel={onCancel}\n      onNewBooking={onNewBooking}\n    />\n  )\n\n  const PAGES_BY_STATE = {\n    [bookingConstants.PAGE_STATE.CANCELLED]: () => statusPage,\n    [bookingConstants.PAGE_STATE.CONFIRMED]: () => statusPage,\n    [bookingConstants.PAGE_STATE.UNAVAILABLE]: () => (\n      <ChangePage translate={translate} event={company.event} onBook={console.log} />\n    ),\n    [bookingConstants.PAGE_STATE.LOADING]: () => translate('Please wait ...'),\n    [bookingConstants.PAGE_STATE.NOT_FOUND]: () => (\n      <Warning\n        image={SomethingWrongImg}\n        imageAlt={translate('Something wrong happened')}\n        title={translate('Unable to find your booking')}\n      />\n    ),\n  }\n\n  return PAGES_BY_STATE[booking.status]()\n}\n\nBooking.contextTypes = {\n  t: PropTypes.func,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n}\n\nconst mapStateToProps = ({ booking, company }) => ({ booking, company })\n\nconst mapDispatchToPros = (dispatch) =>\n  bindActionCreators(\n    {\n      setBookingStatus: bookingActions.setBookingStatus,\n      setBookingData: bookingActions.setBookingData,\n    },\n    dispatch,\n  )\n\nexport default connect(mapStateToProps, mapDispatchToPros)(withRouter(Booking))\n","import React from 'react'\n\nimport { Switch, Route } from 'react-router-dom'\nimport Create from 'modules/booking/create/Create'\nimport Booking from 'modules/booking/Booking'\n\nconst RoutesList = () => (\n  <Switch>\n    <Route path=\"/:companyHash\" exact={true}>\n      <Create />\n    </Route>\n\n    <Route path=\"/:companyHash/booking/:bookingId\">\n      <Booking />\n    </Route>\n\n    <Route path=\"*\" exact={true}>\n      Sorry this page doesn't exists\n    </Route>\n  </Switch>\n)\n\nexport default RoutesList\n","import isMobile from 'is-mobile'\n\nconst isDarkMode = () =>\n  window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n\nconst isMobileOrTablet = () => isMobile({ tablet: true })\n\nexport { isDarkMode, isMobileOrTablet }\n","import { useSelector } from 'react-redux'\n\nimport { isDarkMode, isMobileOrTablet } from 'common/utils/browser.utils'\n\nimport { detect } from 'detect-browser'\n\nconst { body } = document\n\nconst addBrowserClasses = () => {\n  const normalise = (name) => name.toLowerCase().split(' ').join('-')\n\n  const { name, version, os } = detect()\n\n  body.classList.add(normalise(name))\n  body.classList.add(normalise(`${name}-${version}`))\n  body.classList.add(normalise(os))\n}\n\nconst addDarkModeClasses = ({ darkMode = 'browser' } = {}) => {\n  const isDarkModeCheck = darkMode === 'browser' ? isDarkMode() : darkMode\n\n  body.classList.remove(`dark-mode`)\n  body.classList.remove(`light-mode`)\n  body.classList.add(`${isDarkModeCheck ? 'dark' : 'light'}-mode`)\n}\n\nconst addMobileDesktopClasses = () => {\n  body.classList.add(isMobileOrTablet() ? 'mobile-tablet' : 'desktop')\n}\n\nconst BodyClasses = (props) => {\n  const { darkMode = 'browser' } = useSelector((state) => state.settings)\n\n  addDarkModeClasses({ darkMode })\n  addMobileDesktopClasses()\n  addBrowserClasses()\n\n  return props.children\n}\n\nexport default BodyClasses\n","import * as companyConstants from './Company.constants'\n\nexport const getCompanyData = (companyHash) => fetch(companyConstants.COMPANY_DATA_URL(companyHash))\n","import CompanyCard from './CompanyCard'\n\nexport * from './CompanyCard'\nexport default CompanyCard\n","import React from 'react'\nimport moment from 'moment'\nimport * as generalConstants from 'common/utils/general.constants'\nimport './CompanyCard.scss'\nimport CompanyCardBackground from './companyCardBackground.png'\n\nconst CompanyCard = ({ translate, event, children }) => (\n  <div className=\"companyCard\">\n    <div\n      className=\"companyCard__header\"\n      style={{ backgroundImage: `url(${CompanyCardBackground})` }}\n    >\n      <div className=\"companyCard__header--row\">\n        <div className=\"companyCard__header--title\">{event.name}</div>\n        <div className=\"companyCard__header--date\">\n          {moment.unix(event.eventStartTime).format(generalConstants.MOMENT_DAY_MONTH)}\n        </div>\n      </div>\n      <div className=\"companyCard__header--row\">\n        <div className=\"companyCard__header--address\">{event.address}</div>\n        <div className=\"companyCard__header--directions\">\n          <a target=\"_blank\" href={generalConstants.MAPS_URL(event.address)}>\n            {translate('Get directions')}\n          </a>\n        </div>\n      </div>\n    </div>\n    <div className=\"companyCard__content\">{children}</div>\n  </div>\n)\n\nexport default CompanyCard\n","import React from 'react'\nimport CompanyCard from 'common/components/companyCard'\nimport * as PropTypes from 'prop-types'\nimport * as companyConstants from './Company.constants'\n\nconst CompanyPage = ({ state, children, translate, data }) => {\n  const INTERNAL_PAGES = () => (\n    <CompanyCard translate={translate} event={data.event}>\n      {children}\n    </CompanyCard>\n  )\n\n  const PAGES_BY_STATE = {\n    loading: () => <>{translate('Please wait...')}</>,\n    loaded: INTERNAL_PAGES,\n    failed: () => <>{translate('Invalid page')}</>,\n    expired: INTERNAL_PAGES,\n  }\n\n  return PAGES_BY_STATE[state]()\n}\n\nCompanyPage.propTypes = {\n  state: PropTypes.oneOf(companyConstants.PAGE_STATE).isRequired,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  translate: PropTypes.func,\n}\n\nexport default CompanyPage\n","import React, { useState } from 'react'\nimport * as PropTypes from 'prop-types'\nimport * as companyServices from './Company.services'\nimport * as companyConstants from './Company.constants'\nimport * as companyActions from './Company.actions'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { useParams } from 'react-router-dom'\nimport CompanyPage from './Company.page'\nimport { StatusCodes } from 'http-status-codes'\n\nconst Company = ({ children, company, setCompanyData }, { t: translate }) => {\n  const [pageState, setPageState] = useState(companyConstants.PAGE_STATE.LOADING)\n  const { companyHash } = useParams()\n\n  const updateCompanyData = () => {\n    if (company.status !== companyConstants.STATUS.OUTDATED) {\n      setPageState(companyConstants.PAGE_STATE.LOADING)\n    }\n\n    const NEW_PAGE_STATUS = {\n      [StatusCodes.NOT_FOUND]: companyConstants.PAGE_STATE.FAILED,\n      [StatusCodes.LOCKED]: companyConstants.PAGE_STATE.EXPIRED,\n      [StatusCodes.OK]: companyConstants.PAGE_STATE.LOADED,\n    }\n\n    const prevStatus = NEW_PAGE_STATUS[pageState]\n\n    companyServices\n      .getCompanyData(companyHash)\n      .then((response) => {\n        const newStatus = NEW_PAGE_STATUS[response.status] || companyConstants.PAGE_STATE.FAILED\n        if (newStatus !== prevStatus) {\n          setPageState(newStatus)\n        }\n\n        return response.json()\n      })\n      .then(setCompanyData)\n  }\n\n  React.useEffect(() => {\n    updateCompanyData()\n  }, [companyHash])\n\n  if (company.status === companyConstants.STATUS.OUTDATED) {\n    updateCompanyData()\n  }\n\n  return (\n    <CompanyPage state={pageState} translate={translate} data={company}>\n      {children}\n    </CompanyPage>\n  )\n}\n\nCompany.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  company: PropTypes.object,\n  setCompanyData: PropTypes.func.isRequired,\n}\n\nCompany.contextTypes = {\n  t: PropTypes.func,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n}\n\nconst mapStateToProps = ({ company }) => ({\n  company,\n})\n\nconst mapDispatchToPros = (dispatch) =>\n  bindActionCreators(\n    {\n      setCompanyData: companyActions.setCompanyData,\n    },\n    dispatch,\n  )\n\nexport default connect(mapStateToProps, mapDispatchToPros)(withRouter(Company))\n","import React from 'react'\n\nimport * as PropTypes from 'prop-types'\nimport './Main.scss'\nimport 'react-tippy/dist/tippy.css'\nimport { Route } from 'react-router-dom'\n\nimport BackgroundImg from './background.png'\nimport LogoImg from './logo.svg'\n\nimport RoutesList from 'common/routes/RoutesList'\nimport BodyClasses from 'modules/main/BodyClasses'\nimport Company from 'modules/company/Company'\n\nconst Main = (_props, { t: translate }) => (\n  <BodyClasses>\n    <div className=\"app\" style={{ backgroundImage: `url(${BackgroundImg})` }}>\n      <div className=\"app__logo\">\n        <img src={LogoImg} alt={translate('Booksys logo')} />\n      </div>\n\n      <Route path=\"/:companyHash\">\n        <Company>\n          <RoutesList />\n        </Company>\n      </Route>\n    </div>\n  </BodyClasses>\n)\n\nMain.contextTypes = {\n  t: PropTypes.func,\n}\n\nexport default Main\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { HashRouter } from 'react-router-dom'\nimport I18n from 'redux-i18n'\nimport detectBrowserLanguage from 'detect-browser-language'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { translations } from 'common/locales/translations'\nimport configureStore from 'reducers/configureStore'\nimport Main from 'modules/main/Main'\n\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nconst { store, persistor } = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <I18n translations={translations} initialLang={detectBrowserLanguage()} fallbackLang=\"en\">\n          <HashRouter>\n            <Main />\n          </HashRouter>\n        </I18n>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","export const translations = {\n  en: {\n    'Hello world': 'Testing translations II - The revenge',\n  },\n  options: {\n    plural_rule: 'n != 1',\n    plural_number: '2',\n  },\n}\n"],"sourceRoot":""}