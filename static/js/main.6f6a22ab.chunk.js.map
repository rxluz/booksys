{"version":3,"sources":["common/utils/general.constants.js","common/utils/general.utils.js","enhancers/monitorReducer.js","common/utils/state.utils.js","reducers/settings.js","reducers/company.js","reducers/booking.js","reducers/index.js","reducers/configureStore.js","common/utils/browser.utils.js","common/components/input/Input.js","common/components/input/index.js","common/components/button/Button.js","common/components/button/index.js","modules/booking/create/Create.constants.js","common/components/warning/index.js","common/components/warning/Warning.js","modules/booking/create/Create.page.js","modules/booking/create/Create.services.js","modules/company/Company.actions.js","modules/company/Company.constants.js","modules/booking/create/Create.js","modules/booking/Booking.constants.js","modules/booking/Booking.services.js","modules/booking/Booking.actions.js","modules/booking/status/Status.page.js","common/components/officeCard/OfficeCard.js","common/components/officeCard/index.js","common/components/pagination/Pagination.js","common/components/pagination/index.js","modules/booking/change/Change.page.js","common/components/loading/index.js","common/components/loading/Loading.js","modules/booking/Booking.js","modules/main/NotFound.js","common/routes/RoutesList.js","modules/main/BodyClasses.js","modules/company/Company.services.js","common/components/companyCard/CompanyCard.js","common/components/companyCard/index.js","modules/company/Company.page.js","modules/company/Company.js","modules/main/Main.js","serviceWorker.js","index.js","common/locales/translations.js","common/components/warning/something-wrong.svg","modules/main/loading.svg","modules/main/background.png","modules/main/logo.svg","common/components/warning/email.svg","modules/main/NotFound.svg","common/components/companyCard/companyCardBackground.png"],"names":["EMAIL_VALIDATION","BASE_URL","BOOKSYS_CONSOLE_MESSAGE","unix","Math","round","Date","onChangeValue","onChange","isValid","valueForced","isTouched","event","value","target","detectBrowserLanguage","param","forcedLang","window","location","search","split","browserLang","navigator","languages","language","userLanguage","setFieldInitialState","validate","translate","EMAIL","test","email","generalConstants","String","toLowerCase","message","validateEmail","acceptedDomains","emailAddress","some","domain","getSeatsList","preferredTime","availableTimesAndSeats","reduce","seatsDict","time","seats","map","seat","text","num","getSeatsByTime","formattedRoundHour","unixTime","date","getHours","timeToNum","join","getPreferredTimeData","times","hour","push","sort","a","b","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","state","action","number","start","performance","now","newState","end","setSelector","selectors","defaultState","type","name","dispatch","SETTINGS_TOGGLE_DARK_MODE","darkMode","SET_COMPANY_DATA","currentState","SET_COMPANY_STATUS","status","eventStartTime","eventEndTime","address","availableTimes","shouldRefresh","SET_BOOKING_STATUS","SET_BOOKING_DATA","corporateEmail","office","id","combineReducers","settings","company","booking","i18nState","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","isMobileOrTablet","isMobile","tablet","ValidationMessage","displayErrors","validation","role","className","aria-hidden","size","Input","title","placeholder","isValidOuter","list","disabled","showClearButton","onClear","inputRef","useRef","onBlur","emptyValue","onFocus","current","scrollIntoView","behavior","block","inline","onKeyUp","INPUT_ELEMENT","ref","select","aria-label","onClick","defaultValue","selected","innerValue","htmlFor","defaultProps","Button","children","isDisabled","styleType","PAGE_STATE","BOOKING_REQUEST_URL","Warning","image","imageAlt","description","footerMessage","callToActionText","callToActionType","onClickCallToAction","alt","src","CreatePageWrapper","CreatePage","onSubmit","isSubmitting","showSuccessState","showInvalidBookingMessage","resetFormAction","pageState","generalUtils","createConstants","getPageState","useState","setName","setCorporateEmail","setSeats","setPreferredTime","fields","fieldsValue","Object","keys","fieldsVal","field","isSubmitButtonDisabled","values","every","isFormValid","resetFormActionInner","setCorporateEmailInner","trim","PAGES_BY_STATE","EmailImg","SomethingWrongImg","e","preventDefault","requestBooking","data","companyHash","fetch","method","headers","body","qs","stringify","setCompanyData","setCompanyStatus","STATUS","Create","t","useParams","setIsSubmitting","setShowSuccessState","setShowInvalidBookingMessage","createServices","result","StatusCodes","NOT_FOUND","companyConstants","setTimeout","contextTypes","PropTypes","connect","bindActionCreators","companyActions","withRouter","BOOKING_STATUS","LOCKED","OK","PRECONDITION_FAILED","BOOKING_CONFIRM_URL","bookingId","BOOKING_CANCEL_URL","confirmBooking","bookingConstants","obj","fromEntries","entries","filter","Boolean","cancelBooking","setBookingStatus","setBookingData","Message","Title","Time","Office","Seats","CancelButton","onCancel","processing","Status","onNewBooking","isCancelled","aria-level","code","OfficeCard","onBook","timeFormatted","Pagination","total","onPageChange","label","aria-valuenow","floor","aria-valuemin","aria-valuemax","ceil","aria-valuetext","Change","page","setPage","resetPage","seatsAndTimes","seatsAndTime","forEach","index","availableTimesAndSeatsFinal","timeAndSeats","seatsFinal","filterAvailableSeatsAndTimes","totalRecords","length","totalPages","displayPaginator","console","log","items","itemsPerPage","slice","Loading","aria-live","LoadingImg","Booking","history","setProcessing","getBookingData","bookingServices","then","response","json","useEffect","statusPage","confirm","bookingActions","NotFound","_","NotFoundImg","RoutesList","path","exact","document","addDarkModeClasses","classList","remove","add","matchMedia","matches","BodyClasses","props","useSelector","normalise","detect","version","os","addBrowserClasses","getCompanyData","CompanyCard","accessibleDate","toLocaleDateString","weekday","day","month","style","backgroundImage","CompanyCardBackground","rel","href","isRequired","CompanyPage","INTERNAL_PAGES","loading","loaded","failed","expired","Company","setPageState","updateCompanyData","NEW_PAGE_STATUS","prevStatus","companyServices","newStatus","React","Main","BackgroundImg","LogoImg","hostname","match","preloadedState","middlewares","process","thunkMiddleware","enhancers","applyMiddleware","monitorReducersEnhancer","composedEnhancers","compose","store","persistor","persistStore","configureStore","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","translations","en","Hello","options","plural_rule","plural_number","pt","Book","Confirmed","Cancelled","Name","Continue","Cancel","initialLang","fallbackLang","getElementById","serviceWorker","ready","registration","unregister","catch","error","colors","enable","zalgo","random","module","exports"],"mappings":"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","file":"static/js/main.6f6a22ab.chunk.js","sourcesContent":["export const EMAIL_VALIDATION = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport const BASE_URL = 'https://29b0050b-7001-4162-994f-acfec6195274.mock.pstmn.io'\n\nconst GOOGLE_MAPS_URL = 'https://www.google.com/maps/search/'\n\nexport const MAPS_URL = (address) => `${GOOGLE_MAPS_URL}${address}`\n\nexport const BOOKSYS_REPO_URL = 'https://github.com/rxluz/booksys'\n\nexport const BOOKSYS_CONSOLE_MESSAGE = `\n\n██████╗      ██████╗      ██████╗     ██╗  ██╗    ███████╗    ██╗   ██╗    ███████╗\n██╔══██╗    ██╔═══██╗    ██╔═══██╗    ██║ ██╔╝    ██╔════╝    ╚██╗ ██╔╝    ██╔════╝\n██████╔╝    ██║   ██║    ██║   ██║    █████╔╝     ███████╗     ╚████╔╝     ███████╗\n██╔══██╗    ██║   ██║    ██║   ██║    ██╔═██╗     ╚════██║      ╚██╔╝      ╚════██║\n██████╔╝    ╚██████╔╝    ╚██████╔╝    ██║  ██╗    ███████║       ██║       ███████║\n╚═════╝      ╚═════╝      ╚═════╝     ╚═╝  ╚═╝    ╚══════╝       ╚═╝       ╚══════╝\n\n`\n\nexport const SENTRY_URL =\n  'https://254dd7d42eb4454582f8f5ee626210fb@o1034630.ingest.sentry.io/6001277'\n","import * as generalConstants from './general.constants'\n\nexport const emptyFunc = (param) => param\n\nexport const unix = () => Math.round(+new Date() / 1000)\n\nexport const onChangeValue = ({ onChange, isValid, valueForced = 'NO', isTouched = false }) => (\n  event,\n) =>\n  onChange({\n    value: valueForced !== 'NO' ? valueForced : event.target.value,\n    isValid,\n    isTouched,\n  })\n\nexport const getParamURL = (param) =>\n  window.location.search.split(`${param}=`)[1]\n    ? window.location.search.split(`${param}=`)[1]\n    : false\n\nexport const detectBrowserLanguage = () => {\n  const forcedLang = getParamURL('lang')\n\n  const browserLang =\n    (navigator.languages && navigator.languages[0]) || navigator.language || navigator.userLanguage\n\n  return forcedLang || browserLang\n}\n\nexport const setFieldInitialState = (isValid = true, value = '') => ({\n  value,\n  isValid,\n  isTouched: false,\n})\n\nconst validate = (translate) => ({\n  EMAIL: {\n    test: (email) => generalConstants.EMAIL_VALIDATION.test(String(email).toLowerCase()),\n    message: () => translate('Your email looks incorrect'),\n  },\n})\n\nexport const getSeatsAndTime = (availableTimesAndSeats) =>\n  availableTimesAndSeats\n    .reduce(\n      (seatsAndTime, { time, seats }) => {\n        seats.forEach((seat, index) => {\n          seatsAndTime.push({\n            id: `${time}-${seat}-${index}`,\n            seat,\n            time,\n          })\n        })\n\n        return seatsAndTime\n      },\n\n      [],\n    )\n    .sort((a, b) => timeToNum(formattedRoundHour(a.time)) - timeToNum(formattedRoundHour(b.time)))\n\nexport const getSeatsByTime = (availableTimesAndSeats, translate) =>\n  availableTimesAndSeats.reduce(\n    (seatsDict, { time, seats }) => {\n      seatsDict[String(time)] = seats.map((seat) => ({\n        value: seat,\n        text: seat === 1 ? translate('One seat') : translate(`{num} seats`, { num: seat }),\n      }))\n\n      return seatsDict\n    },\n\n    {},\n  )\n\nexport const validateEmail = (translate, acceptedDomains) => ({\n  test: (emailAddress) =>\n    validate(translate).EMAIL.test(emailAddress) &&\n    acceptedDomains.some((domain) => emailAddress.split('@')[1] === domain),\n  message: (emailAddress) =>\n    !validate(translate).EMAIL.test(emailAddress)\n      ? validate(translate).EMAIL.message(emailAddress)\n      : translate('This email is not acceptable, please make sure to use your corporate email'),\n})\n\nexport const getSeatsList = ({ preferredTime, availableTimesAndSeats, translate }) =>\n  preferredTime.value ? getSeatsByTime(availableTimesAndSeats, translate)[preferredTime.value] : []\n\nexport const filterByPage = ({ items, itemsPerPage, page }) =>\n  items.slice((page - 1) * itemsPerPage, page * itemsPerPage)\n\nexport const removeEmptyObjValues = (obj) =>\n  Object.fromEntries(Object.entries(obj).filter(([_, value]) => Boolean(value)))\n\nexport const formattedDate = (unixTime) => {\n  const date = new Date(unixTime * 1000)\n  const options = { weekday: 'short', day: 'numeric', month: 'short' }\n  return date.toLocaleDateString(detectBrowserLanguage(), options)\n}\n\nexport const formattedRoundHour = (unixTime) => {\n  const date = new Date(unixTime * 1000)\n  return `${date.getHours()}:00`\n}\n\nexport const accessibleFormattedDate = (unixTime) => {\n  const date = new Date(unixTime * 1000)\n  const options = { weekday: 'long', day: 'numeric', month: 'long' }\n  return date.toLocaleDateString(detectBrowserLanguage(), options)\n}\n\nconst timeToNum = (time) => time.split(':').join('')\n\nexport const getPreferredTimeData = (availableTimesAndSeats) =>\n  (availableTimesAndSeats || [])\n    .reduce(\n      (times, { time }) => {\n        const now = unix()\n        if (now > time) {\n          return times\n        }\n\n        const hour = formattedRoundHour(time)\n\n        times.push({\n          value: time,\n          text: hour,\n        })\n\n        return times\n      },\n\n      [],\n    )\n    .sort((a, b) => timeToNum(a.text) - timeToNum(b.text))\n","const round = (number) => Math.round(number * 100) / 100\n\nconst monitorReducerEnhancer = (createStore) => (reducer, initialState, enhancer) => {\n  const monitoredReducer = (state, action) => {\n    const start = performance.now()\n    const newState = reducer(state, action)\n    const end = performance.now()\n    const diff = round(end - start)\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('reducer process time:', diff)\n    }\n\n    return newState\n  }\n\n  return createStore(monitoredReducer, initialState, enhancer)\n}\n\nexport default monitorReducerEnhancer\n","export const setSelector = (selectors, defaultState = {}) => (state = defaultState, action) =>\n  selectors(state)[action.type] ? selectors(state)[action.type](state, action) : state\n\nexport const action = (name) => (value = '') => (dispatch) =>\n  dispatch({\n    type: name,\n    value,\n  })\n","import { setSelector } from 'common/utils/state.utils'\n\nconst defaultSettings = () => ({\n  darkMode: 'browser',\n})\n\nconst list = (state) => ({\n  SETTINGS_TOGGLE_DARK_MODE: () => ({ ...state, darkMode: !state.darkMode }),\n})\n\nexport default setSelector(list, defaultSettings())\n","import { setSelector } from 'common/utils/state.utils'\n\nconst defaultSettings = () => ({\n  event: {\n    name: '',\n    eventStartTime: '',\n    eventEndTime: '',\n    address: '',\n    availableTimes: [],\n  },\n  acceptedDomains: [],\n  shouldRefresh: true,\n})\n\nconst list = () => ({\n  SET_COMPANY_DATA: (currentState, action) => {\n    return { ...currentState, ...action.value }\n  },\n  SET_COMPANY_STATUS: (currentState, action) => {\n    return { ...currentState, status: action.value }\n  },\n})\n\nexport default setSelector(list, defaultSettings())\n","import { setSelector } from 'common/utils/state.utils'\n\nconst defaultSettings = () => ({\n  name: '',\n  corporateEmail: '',\n  seats: 0,\n  office: '',\n  time: '',\n  status: 'loading',\n  id: '',\n})\n\nconst list = () => ({\n  SET_BOOKING_STATUS: (currentState, action) => {\n    return { ...currentState, status: action.value }\n  },\n  SET_BOOKING_DATA: (currentState, action) => {\n    return { ...currentState, ...action.value }\n  },\n})\n\nexport default setSelector(list, defaultSettings())\n","import { i18nState } from 'redux-i18n'\nimport { combineReducers } from 'redux'\n\nimport settings from './settings'\nimport company from './company'\nimport booking from './booking'\n\nexport default combineReducers({\n  settings,\n  company,\n  booking,\n  i18nState,\n})\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport monitorReducersEnhancer from 'enhancers/monitorReducer'\nimport loggerMiddleware from 'middleware/logger'\nimport rootReducer from '.'\n\nconst persistConfig = {\n  key: 'settings',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [\n    process.env.NODE_ENV === 'development' && loggerMiddleware,\n    thunkMiddleware,\n  ].filter(Boolean)\n\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const addReduxDevtoolsInDevMode =\n    process.env.NODE_ENV === 'development' &&\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__()\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer, addReduxDevtoolsInDevMode].filter(\n    Boolean,\n  )\n  const composedEnhancers = compose(...enhancers)\n\n  let store = createStore(persistedReducer, preloadedState, composedEnhancers)\n\n  let persistor = persistStore(store)\n\n  return { store, persistor }\n}\n","import isMobile from 'is-mobile'\n\nconst isDarkMode = () =>\n  window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n\nconst isMobileOrTablet = () => isMobile({ tablet: true })\n\nexport { isDarkMode, isMobileOrTablet }\n","import React, { useRef } from 'react'\nimport * as PropTypes from 'prop-types'\nimport { onChangeValue } from 'common/utils/general.utils'\nimport './Input.scss'\nimport { AiOutlineWarning } from 'react-icons/ai'\nimport { BiX } from 'react-icons/bi'\nimport { isMobileOrTablet } from 'common/utils/browser.utils'\n\nconst ValidationMessage = ({ displayErrors, isValid, validation, value }) => {\n  if (!validation) {\n    return null\n  }\n\n  return (\n    displayErrors &&\n    !isValid && (\n      <aside role=\"alert\" className=\"animate__animated animate__fadeIn input__warning\">\n        <i className=\"input__warning--icon\" role=\"presentation\" aria-hidden=\"true\">\n          <AiOutlineWarning size=\"16px\" />\n        </i>\n        <p className=\"input__warning--text\">{validation.message(value)}</p>\n      </aside>\n    )\n  )\n}\n\nconst Input = ({\n  title,\n  type,\n  id,\n  placeholder,\n  value,\n  displayErrors,\n  onChange,\n  isValid: isValidOuter,\n  validation,\n  list,\n  disabled,\n  showClearButton,\n  onClear,\n  translate,\n}) => {\n  const inputRef = useRef()\n  const isValid = !!validation ? validation.test(value) : !!isValidOuter\n  const onBlur = () => onChange({ value, isValid, isTouched: value !== '' })\n\n  const emptyValue = () => {\n    onChangeValue({ onChange, isValid, valueForced: '' })()\n    onClear && onClear()\n  }\n\n  const onFocus = () => {\n    if (isMobileOrTablet()) {\n      inputRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest',\n        inline: 'start',\n      })\n    }\n  }\n\n  const onKeyUp = () => {\n    if (isMobileOrTablet()) {\n      onBlur()\n    }\n  }\n\n  const INPUT_ELEMENT = {\n    text: () => (\n      <input\n        id={id}\n        onFocus={onFocus}\n        ref={inputRef}\n        disabled={disabled}\n        onChange={onChangeValue({ onChange, isValid, isTouched: isMobileOrTablet() })}\n        onKeyUp={onKeyUp}\n        onBlur={onBlur}\n        value={value}\n        className=\"input__element--text\"\n        placeholder={placeholder}\n      />\n    ),\n    select: () => (\n      <>\n        {!disabled && value !== '' && showClearButton && (\n          <div\n            className=\"input__element--clear\"\n            role=\"button\"\n            aria-label={translate('Clear field value')}\n            onClick={emptyValue}\n          >\n            <BiX />\n          </div>\n        )}\n        <select\n          id={id}\n          onFocus={onFocus}\n          ref={inputRef}\n          disabled={disabled}\n          defaultValue={value}\n          onChange={onChangeValue({ onChange, isValid })}\n          className=\"input__element--select\"\n        >\n          {!!placeholder && (\n            <option value=\"\" selected={value === ''} disabled>\n              {placeholder}\n            </option>\n          )}\n          {list &&\n            list.map(({ value: innerValue, text }) => (\n              <option key={innerValue} value={innerValue}>\n                {text}\n              </option>\n            ))}\n        </select>\n      </>\n    ),\n  }\n\n  return (\n    <div className=\"input\">\n      {!!title && (\n        <label className=\"input__title\" htmlFor={id}>\n          {title}\n        </label>\n      )}\n\n      {INPUT_ELEMENT[type] && INPUT_ELEMENT[type]()}\n      <ValidationMessage\n        displayErrors={displayErrors}\n        isValid={isValid}\n        validation={validation}\n        value={value}\n      />\n    </div>\n  )\n}\n\nInput.defaultProps = {\n  type: 'input',\n  isValid: true,\n  displayErrors: true,\n  list: [],\n}\n\nInput.propTypes = {\n  title: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  isValid: PropTypes.bool,\n  displayErrors: PropTypes.bool,\n  disabled: PropTypes.bool,\n  validation: PropTypes.object,\n  list: PropTypes.array,\n}\n\nexport default Input\n","import Input from './Input'\n\nexport * from './Input'\nexport default Input\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\n\nimport './Button.scss'\n\nconst Button = ({ children, isDisabled, onClick, styleType }) => (\n  <button\n    className={`button button--${styleType}`}\n    onClick={() => (!isDisabled ? onClick() : null)}\n    disabled={isDisabled}\n  >\n    {children}\n  </button>\n)\n\nButton.defaultProps = {\n  styleType: 'primary',\n}\n\nButton.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  isDisabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  styleType: PropTypes.oneOf(['primary', 'secondary']),\n}\n\nexport default Button\n","import Button from './Button'\n\nexport * from './Button'\nexport default Button\n","import * as generalConstants from 'common/utils/general.constants'\n\nexport const PAGE_STATE = {\n  LOADING: 'loading',\n  EXPIRED: 'expired',\n  FORM: 'form',\n  SUCCESS: 'success',\n}\n\nexport const BOOKING_REQUEST_URL = `${generalConstants.BASE_URL}/booking/request`\n","import Warning from './Warning'\n\nexport * from './Warning'\nexport default Warning\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\n\nimport Button from 'common/components/button'\nimport './Warning.scss'\n\nconst Warning = ({\n  image,\n  imageAlt,\n  title,\n  description,\n  footerMessage,\n  callToActionText,\n  callToActionType,\n  onClickCallToAction,\n}) => (\n  <div className=\"warning animate__animated animate__fadeIn\" role=\"alert\">\n    <div className=\"warning__content\">\n      {image && (\n        <div className=\"warning__image\" role=\"presentation\">\n          <img alt={imageAlt} src={image} />\n        </div>\n      )}\n      {title && <div className=\"warning__title\">{title}</div>}\n      {description && <div className=\"warning__description\">{description}</div>}\n      {footerMessage && <div className=\"warning__footer-message\">{footerMessage}</div>}\n    </div>\n    {callToActionText && (\n      <div className=\"warning__footer\">\n        <Button\n          styleType={callToActionType}\n          className=\"warning__footer--button\"\n          onClick={onClickCallToAction}\n        >\n          {callToActionText}\n        </Button>\n      </div>\n    )}\n  </div>\n)\n\nWarning.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  imageAlt: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  footerMessage: PropTypes.string,\n  callToActionText: PropTypes.string,\n  callToActionType: PropTypes.oneOf(['primary', 'secondary']),\n  onClickCallToAction: PropTypes.func,\n}\n\nexport default Warning\n","import React, { useState } from 'react'\nimport * as PropTypes from 'prop-types'\nimport Input from 'common/components/input'\nimport Button from 'common/components/button'\nimport * as generalUtils from 'common/utils/general.utils'\nimport * as createConstants from './Create.constants'\nimport Warning from 'common/components/warning'\nimport SomethingWrongImg from 'common/components/warning/something-wrong.svg'\nimport EmailImg from 'common/components/warning/email.svg'\nimport LoadingImg from 'modules/main/loading.svg'\n\nimport './Create.scss'\n\nconst isFormValid = (fields) =>\n  Object.values(fields).every(({ value, isValid }) => !!value && isValid)\n\nconst getPageState = ({ eventEndTime, showSuccessState }) => {\n  const isEventExpired = eventEndTime < generalUtils.unix()\n\n  if (isEventExpired) {\n    return createConstants.PAGE_STATE.EXPIRED\n  }\n\n  if (showSuccessState) {\n    return createConstants.PAGE_STATE.SUCCESS\n  }\n\n  return createConstants.PAGE_STATE.FORM\n}\n\nconst CreatePageWrapper = ({ children }) => (\n  <section className=\"create-page animate__animated animate__fadeIn\">{children}</section>\n)\n\nconst CreatePage = ({\n  translate,\n  availableTimesAndSeats,\n  acceptedDomains,\n  onSubmit,\n  isSubmitting,\n  eventEndTime,\n  showSuccessState,\n  showInvalidBookingMessage,\n  resetFormAction,\n}) => {\n  const pageState = getPageState({ showSuccessState, eventEndTime })\n  const [name, setName] = useState(generalUtils.setFieldInitialState())\n  const [corporateEmail, setCorporateEmail] = useState(generalUtils.setFieldInitialState())\n  const [seats, setSeats] = useState(generalUtils.setFieldInitialState())\n  const [preferredTime, setPreferredTime] = useState(generalUtils.setFieldInitialState())\n\n  const fields = { name, corporateEmail, seats, preferredTime }\n  const fieldsValue = Object.keys(fields).reduce((fieldsVal, field) => {\n    fieldsVal[field] = fields[field].value\n\n    return fieldsVal\n  }, {})\n\n  const isSubmitButtonDisabled = isSubmitting || !isFormValid(fields)\n\n  const resetFormActionInner = () => {\n    setSeats(generalUtils.setFieldInitialState())\n    setPreferredTime(generalUtils.setFieldInitialState())\n    resetFormAction()\n  }\n\n  const setCorporateEmailInner = ({ value, ...fields }) =>\n    setCorporateEmail({ value: value.trim(), ...fields })\n\n  const PAGES_BY_STATE = {\n    [createConstants.PAGE_STATE.SUCCESS]: () => (\n      <Warning\n        image={EmailImg}\n        imageAlt={translate('Email illustration')}\n        title={translate('Check your email')}\n        description={translate(\n          'You are almost there to reserve your room for this event! Please make sure to finish your reservation as soon as possible to avoid losing your booking.',\n        )}\n        footerMessage={translate(\"If you can't found the email, check your spam folder.\")}\n        callToActionType=\"secondary\"\n        callToActionText={translate('New booking')}\n        onClickCallToAction={resetFormActionInner}\n      />\n    ),\n    [createConstants.PAGE_STATE.LOADING]: () => (\n      <div role=\"presentation\">\n        <LoadingImg />\n      </div>\n    ),\n    [createConstants.PAGE_STATE.EXPIRED]: () => (\n      <Warning\n        image={SomethingWrongImg}\n        imageAlt={translate('Something wrong happened')}\n        title={translate('This event has ended')}\n      />\n    ),\n\n    [createConstants.PAGE_STATE.FORM]: () => (\n      <div className=\"animate__animated animate__fadeIn\">\n        <div className=\"create-page__title\">\n          {translate('Fill in the details below to make your office reservation')}\n        </div>\n        <form\n          aria-label={translate('Office reservation')}\n          onSubmit={(e) => {\n            e.preventDefault()\n          }}\n        >\n          <div className=\"create-page__content\">\n            <Input\n              translate={translate}\n              id=\"name\"\n              type=\"text\"\n              value={name.value}\n              onChange={setName}\n              title={translate('Name')}\n            />\n            <Input\n              translate={translate}\n              id=\"corporateEmail\"\n              type=\"text\"\n              value={corporateEmail.value}\n              onChange={setCorporateEmailInner}\n              title={translate('Corporate email')}\n              displayErrors={corporateEmail.isTouched}\n              validation={generalUtils.validateEmail(translate, acceptedDomains)}\n            />\n\n            <Input\n              translate={translate}\n              id=\"preferredTime\"\n              title={translate('Book your preferences for this event')}\n              type=\"select\"\n              list={generalUtils.getPreferredTimeData(availableTimesAndSeats)}\n              value={preferredTime.value}\n              onChange={setPreferredTime}\n              placeholder={translate('Preferred time')}\n            />\n\n            <Input\n              translate={translate}\n              id=\"seats\"\n              type=\"select\"\n              disabled={preferredTime.value === ''}\n              list={generalUtils.getSeatsList({ preferredTime, availableTimesAndSeats, translate })}\n              value={seats.value}\n              onChange={setSeats}\n              placeholder={translate('Number of seats')}\n              displayErrors={showInvalidBookingMessage}\n              validation={{\n                test: () => !showInvalidBookingMessage,\n                message: () => translate('Your booking preferences has changed'),\n              }}\n            />\n          </div>\n\n          <div className=\"create-page__footer\">\n            <Button\n              onClick={() => !isSubmitButtonDisabled && onSubmit(fieldsValue)}\n              isDisabled={isSubmitButtonDisabled}\n            >\n              {isSubmitting ? translate('Please wait ...') : translate('Continue')}\n            </Button>\n          </div>\n        </form>\n      </div>\n    ),\n  }\n\n  return <CreatePageWrapper>{PAGES_BY_STATE[pageState]()}</CreatePageWrapper>\n}\n\nCreatePage.propTypes = {\n  translate: PropTypes.func,\n  availableTimesAndSeats: PropTypes.array,\n  acceptedDomains: PropTypes.arrayOf(PropTypes.string),\n  onSubmit: PropTypes.func,\n  isSubmitting: PropTypes.bool,\n  eventEndTime: PropTypes.number,\n  showSuccessState: PropTypes.bool,\n  showInvalidBookingMessage: PropTypes.bool,\n  resetFormAction: PropTypes.func,\n}\n\nexport default CreatePage\n","import * as createConstants from './Create.constants'\nimport qs from 'qs'\n\nexport const requestBooking = async ({ data, companyHash }) =>\n  fetch(createConstants.BOOKING_REQUEST_URL, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: qs.stringify({ ...data, companyHash }),\n  })\n","import { action } from 'common/utils/state.utils'\n\nexport const setCompanyData = action('SET_COMPANY_DATA')\nexport const setCompanyStatus = action('SET_COMPANY_STATUS')\n","import * as generalConstants from 'common/utils/general.constants'\n\nexport const COMPANY_DATA_URL = (companyHash) =>\n  `${generalConstants.BASE_URL}/company/${companyHash}`\n\nexport const PAGE_STATE = {\n  FAILED: 'failed',\n  LOADED: 'loaded',\n  LOADING: 'loading',\n  EXPIRED: 'expired',\n}\n\nexport const STATUS = {\n  OUTDATED: 'outdated',\n  SUCCESS: 'success',\n}\n","import React, { useState } from 'react'\nimport * as PropTypes from 'prop-types'\nimport CreatePage from './Create.page'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport * as createServices from './Create.services'\nimport * as companyActions from 'modules/company/Company.actions'\nimport * as companyConstants from 'modules/company/Company.constants'\nimport { StatusCodes } from 'http-status-codes'\n\nimport { useParams } from 'react-router-dom'\n\nconst Create = ({ company, setCompanyStatus }, { t: translate }) => {\n  const { companyHash } = useParams()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [showSuccessState, setShowSuccessState] = useState(false)\n  const [showInvalidBookingMessage, setShowInvalidBookingMessage] = useState(false)\n\n  const onSubmit = async (data) => {\n    setIsSubmitting(true)\n    const result = await createServices.requestBooking({ data, companyHash })\n    const { status } = result\n\n    if (status === StatusCodes.NOT_FOUND) {\n      setCompanyStatus(companyConstants.STATUS.OUTDATED)\n      setShowInvalidBookingMessage(true)\n      setIsSubmitting(false)\n\n      setTimeout(() => setShowInvalidBookingMessage(true), 3000)\n\n      return\n    }\n\n    setShowSuccessState(true)\n  }\n\n  const resetFormAction = () => {\n    setCompanyStatus(companyConstants.STATUS.OUTDATED)\n    setShowSuccessState(false)\n    setIsSubmitting(false)\n  }\n\n  return (\n    <CreatePage\n      translate={translate}\n      acceptedDomains={company.acceptedDomains}\n      eventStartTime={company.event.eventStartTime}\n      eventEndTime={company.event.eventEndTime}\n      availableTimesAndSeats={company.event.availableTimesAndSeats}\n      onSubmit={onSubmit}\n      isSubmitting={isSubmitting}\n      showInvalidBookingMessage={showInvalidBookingMessage}\n      showSuccessState={showSuccessState}\n      resetFormAction={resetFormAction}\n    />\n  )\n}\n\nCreate.propTypes = { company: PropTypes.object, setCompanyStatus: PropTypes.func }\n\nCreate.contextTypes = {\n  t: PropTypes.func,\n}\n\nconst mapStateToProps = ({ company }) => ({\n  company,\n})\n\nconst mapDispatchToPros = (dispatch) =>\n  bindActionCreators(\n    {\n      setCompanyStatus: companyActions.setCompanyStatus,\n    },\n    dispatch,\n  )\n\nexport default connect(mapStateToProps, mapDispatchToPros)(withRouter(Create))\n","import * as generalConstants from 'common/utils/general.constants'\nimport { StatusCodes } from 'http-status-codes'\n\nexport const PAGE_STATE = {\n  LOADING: 'loading',\n  NOT_FOUND: 'notFound',\n  UNAVAILABLE: 'unavailable',\n  CANCELLED: 'cancelled',\n  CONFIRMED: 'confirmed',\n}\n\nexport const BOOKING_STATUS = {\n  [StatusCodes.NOT_FOUND]: PAGE_STATE.NOT_FOUND,\n  [StatusCodes.LOCKED]: PAGE_STATE.CANCELLED,\n  [StatusCodes.OK]: PAGE_STATE.CONFIRMED,\n  [StatusCodes.PRECONDITION_FAILED]: PAGE_STATE.UNAVAILABLE,\n}\n\nexport const STATUS_MESSAGES = (translate) => ({\n  [PAGE_STATE.CONFIRMED]: translate(\n    'Congratulations! Your reservation has been successfully confirmed. Here is a brief summary of your booking details:',\n  ),\n  [PAGE_STATE.CANCELLED]: translate(\n    'You cancelled your booking. Here is a brief summary of your cancelled booking details:',\n  ),\n})\n\nexport const STATUS_NAMES = (translate) => ({\n  [PAGE_STATE.CONFIRMED]: translate('Confirmed'),\n  [PAGE_STATE.CANCELLED]: translate('Cancelled'),\n})\n\nexport const BOOKING_CONFIRM_URL = (bookingId) =>\n  `${generalConstants.BASE_URL}/booking/confirm/${bookingId}`\nexport const BOOKING_CANCEL_URL = `${generalConstants.BASE_URL}/booking/cancel`\n","import * as bookingConstants from './Booking.constants'\nimport * as generalUtils from 'common/utils/general.utils'\n\nimport qs from 'qs'\n\nexport const confirmBooking = async ({ bookingId, seat, time }) =>\n  fetch(bookingConstants.BOOKING_CONFIRM_URL(bookingId), {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: qs.stringify(generalUtils.removeEmptyObjValues({ bookingId, seat, time })),\n  })\n\nexport const cancelBooking = async ({ bookingId }) =>\n  fetch(bookingConstants.BOOKING_CANCEL_URL, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: qs.stringify({ bookingId }),\n  })\n","import { action } from 'common/utils/state.utils'\n\nexport const setBookingStatus = action('SET_BOOKING_STATUS')\nexport const setBookingData = action('SET_BOOKING_DATA')\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\nimport * as generalUtils from 'common/utils/general.utils'\nimport Button from 'common/components/button'\nimport './Status.scss'\nimport * as bookingConstants from '../Booking.constants'\n\nconst Message = ({ status, translate }) => {\n  const message = bookingConstants.STATUS_MESSAGES(translate)[status] || false\n\n  return message ? <div className=\"booking-status__message\">{message}</div> : null\n}\n\nconst Title = ({ status, translate }) => (\n  <div role=\"status\" className={`booking-status__status--${status}`}>\n    {bookingConstants.STATUS_NAMES(translate)[status]}\n  </div>\n)\n\nconst Time = ({ time, translate }) => (\n  <div className=\"booking-status__row\">\n    <div className=\"booking-status__row--title\">{translate('Time')}</div>\n    <div className=\"booking-status__row--value\">{generalUtils.formattedRoundHour(time)}</div>\n  </div>\n)\n\nconst Office = ({ office, translate }) => (\n  <div className=\"booking-status__row\">\n    <div className=\"booking-status__row--title\">{translate('Office')}</div>\n    <div className=\"booking-status__row--value\">{office}</div>\n  </div>\n)\n\nconst Seats = ({ seats, translate }) => (\n  <div className=\"booking-status__row\">\n    <div className=\"booking-status__row--title\">{translate('Seats')}</div>\n    <div className=\"booking-status__row--value\">{seats}</div>\n  </div>\n)\n\nconst CancelButton = ({ onCancel, translate, processing }) => (\n  <div className=\"booking-status__row\">\n    <Button onClick={onCancel} styleType=\"secondary\" isDisabled={processing}>\n      {processing ? translate('Please wait ...') : translate('Cancel')}\n    </Button>\n  </div>\n)\n\nconst Status = ({ translate, data, onNewBooking, onCancel, processing }) => {\n  const isCancelled = data.status === bookingConstants.PAGE_STATE.CANCELLED\n\n  return (\n    <section className=\"booking-status animate__animated animate__fadeIn\">\n      <div className=\"booking-status__title\" role=\"heading\" aria-level=\"2\">\n        {translate('Hey {name},', { name: data.name })}\n      </div>\n      <Message status={data.status} translate={translate} />\n\n      <div className=\"booking-status__status\">\n        <Title status={data.status} translate={translate} />\n\n        <div className=\"booking-status__status--code\">\n          {translate('Reservation code: {code}', { code: data.id })}\n        </div>\n      </div>\n\n      {!isCancelled && (\n        <>\n          <Time time={data.time} translate={translate} />\n          <Seats seats={data.seats} translate={translate} />\n          <Office office={data.office} translate={translate} />\n        </>\n      )}\n\n      <div className=\"booking-status__row\">\n        <Button isDisabled={processing} onClick={onNewBooking} styleType=\"secondary\">\n          {translate('New booking')}\n        </Button>\n      </div>\n\n      {!isCancelled && (\n        <CancelButton processing={processing} translate={translate} onCancel={onCancel} />\n      )}\n    </section>\n  )\n}\n\nStatus.defaultProps = {\n  translate: (value) => value,\n}\n\nStatus.propTypes = {\n  translate: PropTypes.func,\n  data: PropTypes.object,\n  onNewBooking: PropTypes.func,\n  onCancel: PropTypes.func,\n  processing: PropTypes.bool,\n}\n\nexport default Status\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\n\nimport * as generalUtils from 'common/utils/general.utils'\n\nimport { BiChair } from 'react-icons/bi'\nimport Button from 'common/components/button'\n\nimport './OfficeCard.scss'\n\nconst OfficeCard = ({ time, seat, onBook, translate }) => {\n  const timeFormatted = generalUtils.formattedRoundHour(time)\n\n  return (\n    <div className=\"office-card animate__animated animate__fadeIn\" role=\"listitem\">\n      <div className=\"office-card__content\">\n        <div\n          className=\"office-card__time\"\n          aria-label={translate('Time: {time}', { time: timeFormatted })}\n        >\n          {timeFormatted}\n        </div>\n        <div className=\"office-card__seats\">\n          <div className=\"office-card__seats--icon\" role=\"presentation\" aria-hidden=\"true\">\n            <BiChair />\n          </div>\n          <div\n            className=\"office-card__seats--text\"\n            aria-label={translate('Seats available: {seat}', { seat })}\n          >\n            {seat}\n          </div>\n        </div>\n      </div>\n      <div className=\"office-card__footer\">\n        <Button onClick={() => onBook({ seat, time })}>{translate('Book')}</Button>\n      </div>\n    </div>\n  )\n}\n\nOfficeCard.defaultProps = {\n  translate: (value) => value,\n}\n\nOfficeCard.propTypes = {\n  translate: PropTypes.func,\n  time: PropTypes.number,\n  seat: PropTypes.number,\n  onBook: PropTypes.func,\n}\n\nexport default OfficeCard\n","import OfficeCard from './OfficeCard'\n\nexport * from './OfficeCard'\nexport default OfficeCard\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\nimport PaginationLib from 'react-responsive-pagination'\nimport './Pagination.scss'\n\nconst Pagination = ({ current, total, onPageChange, label, translate }) => (\n  <nav\n    role=\"slider\"\n    aria-label={label}\n    aria-valuenow={Math.floor(current)}\n    aria-valuemin=\"1\"\n    aria-valuemax={Math.ceil(total)}\n    aria-valuetext={translate('Page {num}', { num: current })}\n  >\n    <PaginationLib\n      current={Math.floor(current)}\n      total={Math.ceil(total)}\n      onPageChange={onPageChange}\n    />\n  </nav>\n)\n\nPagination.defaultProps = {\n  translate: (value) => value,\n}\n\nPagination.propTypes = {\n  current: PropTypes.number,\n  total: PropTypes.number,\n  onPageChange: PropTypes.func,\n  label: PropTypes.string,\n  translate: PropTypes.func,\n}\n\nexport default Pagination\n","import Pagination from './Pagination'\n\nexport * from './Pagination'\nexport default Pagination\n","import React, { useState } from 'react'\nimport * as PropTypes from 'prop-types'\nimport Input from 'common/components/input'\nimport OfficeCard from 'common/components/officeCard'\nimport Pagination from 'common/components/pagination'\n\nimport './Change.scss'\nimport * as generalUtils from 'common/utils/general.utils'\n\nconst filterAvailableSeatsAndTimes = ({ seats, preferredTime, availableTimesAndSeats }) =>\n  availableTimesAndSeats.reduce((availableTimesAndSeatsFinal, timeAndSeats) => {\n    if (\n      String(preferredTime.value) !== '' &&\n      String(preferredTime.value) !== String(timeAndSeats.time)\n    ) {\n      return availableTimesAndSeatsFinal\n    }\n\n    const seatsFinal = timeAndSeats.seats.filter((seat) => {\n      if (String(preferredTime.value) === '') {\n        return true\n      }\n\n      return String(seats.value) === '' || String(seats.value) === String(seat) ? true : false\n    })\n\n    availableTimesAndSeatsFinal.push({\n      time: timeAndSeats.time,\n      seats: seatsFinal,\n    })\n\n    return availableTimesAndSeatsFinal\n  }, [])\n\nconst Change = ({ translate, event, onBook }) => {\n  const { availableTimesAndSeats } = event\n\n  const [seats, setSeats] = useState(generalUtils.setFieldInitialState())\n  const [preferredTime, setPreferredTime] = useState(generalUtils.setFieldInitialState())\n  const [page, setPage] = useState(1)\n\n  const resetPage = () => setPage(1)\n\n  const clearPreferredTime = () => {\n    setSeats(generalUtils.setFieldInitialState())\n    resetPage()\n  }\n\n  const setPreferredTimeInner = (value) => {\n    setPreferredTime(value)\n    setSeats(generalUtils.setFieldInitialState())\n    resetPage()\n  }\n\n  const setSeatsInner = (value) => {\n    setSeats(value)\n    resetPage()\n  }\n\n  const filteredAvailableTimesAndTimes = filterAvailableSeatsAndTimes({\n    seats,\n    preferredTime,\n    availableTimesAndSeats,\n  })\n\n  const seatsAndTimes = generalUtils.getSeatsAndTime(filteredAvailableTimesAndTimes)\n\n  const itemsPerPage = 6\n  const totalRecords = seatsAndTimes.length\n  const totalPages = totalRecords / itemsPerPage\n\n  const displayPaginator = totalRecords > itemsPerPage\n\n  console.log({ preferredTime })\n  return (\n    <section className=\"booking-change animate__animated animate__fadeIn\">\n      <div className=\"booking-change__title\" role=\"alert\">\n        {translate(\n          \"Unfortunately the time that you selected isn't available anymore. Please select a new option below\",\n        )}\n      </div>\n      <div\n        className=\"booking-change__options\"\n        role=\"search\"\n        aria-label={translate('Time/Seats filters')}\n      >\n        <div className=\"booking-change__column booking-change__column--left\">\n          <Input\n            type=\"select\"\n            translate={translate}\n            id=\"booking-change-time\"\n            value={preferredTime.value}\n            onChange={setPreferredTimeInner}\n            showClearButton={true}\n            onClear={clearPreferredTime}\n            list={generalUtils.getPreferredTimeData(availableTimesAndSeats)}\n            placeholder={translate('Select a time')}\n          />\n        </div>\n        <div className=\"booking-change__column booking-change__column--right\">\n          <Input\n            type=\"select\"\n            translate={translate}\n            disabled={preferredTime.value === ''}\n            value={seats.value}\n            onChange={setSeatsInner}\n            showClearButton={true}\n            id=\"booking-change-seats\"\n            list={generalUtils.getSeatsList({ preferredTime, availableTimesAndSeats, translate })}\n            placeholder={translate('Number of seats')}\n          />\n        </div>\n      </div>\n      <div className=\"booking-change__subtitle\" role=\"heading\" aria-level=\"2\">\n        {translate('Available offices')}\n      </div>\n      <div className=\"booking-change__content\" role=\"list\">\n        {generalUtils\n          .filterByPage({ items: seatsAndTimes, page, itemsPerPage })\n          .map(({ id, seat, time }) => (\n            <OfficeCard key={id} seat={seat} time={time} translate={translate} onBook={onBook} />\n          ))}\n      </div>\n\n      {displayPaginator && (\n        <div className=\"booking-change__paginator\">\n          <Pagination\n            current={page}\n            translate={translate}\n            label={translate('Navigate into available offices list')}\n            total={totalPages}\n            onPageChange={setPage}\n          />\n        </div>\n      )}\n    </section>\n  )\n}\n\nChange.defaultProps = {\n  translate: (value) => value,\n}\n\nChange.propTypes = {\n  translate: PropTypes.func,\n  event: PropTypes.shape({ availableTimesAndSeats: PropTypes.array }),\n  onBook: PropTypes.func,\n}\n\nexport default Change\n","import Loading from './Loading'\n\nexport * from './Loading'\nexport default Loading\n","import React from 'react'\nimport LoadingImg from 'modules/main/loading.svg'\n\nconst Loading = ({ translate }) => (\n  <div role=\"status\" aria-live=\"polite\">\n    <img alt={translate('Please wait ...')} src={LoadingImg} />\n  </div>\n)\n\nexport default Loading\n","/* This page will try to confirm the book,\n    and will return the booking details,\n    case it return that wasn't possible to confirm will redirect to the change page,\n    case the book return that was cancelled or confirm, it will redirect to the status page.\n\n    Also this page will add the book details in the store\n*/\n\nimport React, { useEffect, useState } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { useParams } from 'react-router-dom'\nimport * as PropTypes from 'prop-types'\nimport * as bookingServices from './Booking.services'\nimport * as bookingActions from './Booking.actions'\nimport * as bookingConstants from './Booking.constants'\nimport StatusPage from './status/Status.page'\nimport ChangePage from './change/Change.page'\nimport Warning from 'common/components/warning'\nimport SomethingWrongImg from 'common/components/warning/something-wrong.svg'\nimport Loading from 'common/components/loading'\n\nconst Booking = (\n  { booking, setBookingStatus, setBookingData, history, company },\n  { t: translate },\n) => {\n  const { bookingId, companyHash } = useParams()\n  const [processing, setProcessing] = useState(false)\n\n  const getBookingData = ({ seat = null, time = null } = {}) => {\n    bookingServices\n      .confirmBooking({ seat, time, bookingId })\n      .then((response) => {\n        setBookingStatus(bookingConstants.BOOKING_STATUS[response.status])\n        setProcessing(false)\n\n        return response.json()\n      })\n      .then((response) => {\n        if (response && response.booking) {\n          setBookingData(response.booking)\n        }\n      })\n  }\n\n  useEffect(() => {\n    getBookingData()\n  }, [bookingId])\n\n  const onNewBooking = () => history.push(`/${companyHash}`)\n\n  const onCancel = () => {\n    if (window.confirm(translate('Are you sure that you want to cancel your booking'))) {\n      setProcessing(true)\n      bookingServices.cancelBooking({ bookingId }).then(() => {\n        getBookingData()\n      })\n    }\n  }\n\n  const statusPage = (\n    <StatusPage\n      translate={translate}\n      data={booking}\n      processing={processing}\n      onCancel={onCancel}\n      onNewBooking={onNewBooking}\n    />\n  )\n\n  const PAGES_BY_STATE = {\n    [bookingConstants.PAGE_STATE.CANCELLED]: () => statusPage,\n    [bookingConstants.PAGE_STATE.CONFIRMED]: () => statusPage,\n    [bookingConstants.PAGE_STATE.UNAVAILABLE]: () => (\n      <ChangePage translate={translate} event={company.event} onBook={getBookingData} />\n    ),\n    [bookingConstants.PAGE_STATE.LOADING]: () => <Loading translate={translate} />,\n    [bookingConstants.PAGE_STATE.NOT_FOUND]: () => (\n      <Warning\n        image={SomethingWrongImg}\n        imageAlt={translate('Something wrong happened')}\n        title={translate('Unable to find your booking')}\n      />\n    ),\n  }\n\n  return PAGES_BY_STATE[booking.status] ? PAGES_BY_STATE[booking.status]() : null\n}\n\nBooking.propTypes = {\n  booking: PropTypes.object,\n  setBookingStatus: PropTypes.func,\n  setBookingData: PropTypes.func,\n  history: PropTypes.object,\n  company: PropTypes.object,\n}\n\nBooking.contextTypes = {\n  t: PropTypes.func,\n}\n\nconst mapStateToProps = ({ booking, company }) => ({ booking, company })\n\nconst mapDispatchToPros = (dispatch) =>\n  bindActionCreators(\n    {\n      setBookingStatus: bookingActions.setBookingStatus,\n      setBookingData: bookingActions.setBookingData,\n    },\n    dispatch,\n  )\n\nexport default connect(mapStateToProps, mapDispatchToPros)(withRouter(Booking))\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\nimport NotFoundImg from './NotFound.svg'\n\nconst NotFound = (_, { t: translate }) => (\n  <div className=\"not-found\">\n    <img src={NotFoundImg} alt={translate('Image with a alien spaceship abducting somebody')} />\n    <br />\n    <br />\n    {translate('Page not found', {}, '404 main text')} <br />\n  </div>\n)\n\nNotFound.defaultProps = {\n  translate: (value) => value,\n}\n\nNotFound.contextTypes = {\n  t: PropTypes.func,\n}\n\nexport default NotFound\n","import React from 'react'\n\nimport { Switch, Route } from 'react-router-dom'\nimport Create from 'modules/booking/create/Create'\nimport Booking from 'modules/booking/Booking'\nimport NotFound from 'modules/main/NotFound'\n\nconst RoutesList = () => (\n  <Switch>\n    <Route path=\"/:companyHash\" exact={true}>\n      <Create />\n    </Route>\n\n    <Route path=\"/:companyHash/booking/:bookingId\">\n      <Booking />\n    </Route>\n\n    <Route path=\"*\" exact={true}>\n      <NotFound />\n    </Route>\n  </Switch>\n)\n\nexport default RoutesList\n","import { useSelector } from 'react-redux'\n\nimport { isDarkMode, isMobileOrTablet } from 'common/utils/browser.utils'\n\nimport { detect } from 'detect-browser'\n\nconst { body } = document\n\nconst addBrowserClasses = () => {\n  const normalise = (name) => name.toLowerCase().split(' ').join('-')\n\n  const { name, version, os } = detect()\n\n  body.classList.add(normalise(name))\n  body.classList.add(normalise(`${name}-${version}`))\n  body.classList.add(normalise(os))\n}\n\nconst addDarkModeClasses = () => {\n  body.classList.remove(`dark-mode`)\n  body.classList.remove(`light-mode`)\n  body.classList.add(`${isDarkMode() ? 'dark' : 'light'}-mode`)\n}\n\nconst addMobileDesktopClasses = () => {\n  body.classList.add(isMobileOrTablet() ? 'mobile-tablet' : 'desktop')\n}\n\nconst BodyClasses = (props) => {\n  const { darkMode = 'browser' } = useSelector((state) => state.settings)\n\n  addDarkModeClasses({ darkMode })\n  addMobileDesktopClasses()\n  addBrowserClasses()\n\n  return props.children\n}\n\nexport default BodyClasses\n","import * as companyConstants from './Company.constants'\n\nexport const getCompanyData = (companyHash) => fetch(companyConstants.COMPANY_DATA_URL(companyHash))\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\n\nimport * as generalConstants from 'common/utils/general.constants'\nimport * as generalUtils from 'common/utils/general.utils'\n\nimport './CompanyCard.scss'\nimport CompanyCardBackground from './companyCardBackground.png'\n\nconst CompanyCard = ({ translate, event, children }) => {\n  const accessibleDate = generalUtils.accessibleFormattedDate(event.eventStartTime)\n\n  const date = generalUtils.formattedDate(event.eventStartTime)\n\n  return (\n    <div className=\"companyCard\">\n      <div\n        className=\"companyCard__header\"\n        style={{ backgroundImage: `url(${CompanyCardBackground})` }}\n      >\n        <div className=\"companyCard__header--row\">\n          <div className=\"companyCard__header--title\" title={translate('Event name')}>\n            {event.name}\n          </div>\n          <div className=\"companyCard__header--date\" aria-label={accessibleDate}>\n            {date}\n          </div>\n        </div>\n        <div className=\"companyCard__header--row\">\n          <address className=\"companyCard__header--address\">{event.address}</address>\n          <div className=\"companyCard__header--directions\">\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={generalConstants.MAPS_URL(event.address)}\n            >\n              {translate('Get directions')}\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"companyCard__content\">{children}</div>\n    </div>\n  )\n}\n\nCompanyCard.defaultProps = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  translate: (value) => value,\n  event: PropTypes.shape({\n    name: PropTypes.string,\n    address: PropTypes.string,\n    eventStartTime: PropTypes.number,\n  }),\n}\n\nexport default CompanyCard\n","import CompanyCard from './CompanyCard'\n\nexport * from './CompanyCard'\nexport default CompanyCard\n","import React from 'react'\nimport CompanyCard from 'common/components/companyCard'\nimport * as PropTypes from 'prop-types'\nimport * as companyConstants from './Company.constants'\nimport Loading from 'common/components/loading'\nimport NotFound from 'modules/main/NotFound'\n\nconst CompanyPage = ({ state, children, translate, data }) => {\n  const INTERNAL_PAGES = () => (\n    <CompanyCard translate={translate} event={data.event}>\n      {children}\n    </CompanyCard>\n  )\n\n  const PAGES_BY_STATE = {\n    loading: () => <Loading translate={translate} />,\n    loaded: INTERNAL_PAGES,\n    failed: () => <NotFound translate={translate} />,\n    expired: INTERNAL_PAGES,\n  }\n\n  return PAGES_BY_STATE[state]()\n}\n\nCompanyPage.defaultProps = {\n  translate: (value) => value,\n}\n\nCompanyPage.propTypes = {\n  state: PropTypes.oneOf(companyConstants.PAGE_STATE),\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  translate: PropTypes.func,\n  data: PropTypes.shape({\n    event: PropTypes.object,\n  }),\n}\n\nexport default CompanyPage\n","import React, { useState } from 'react'\nimport * as PropTypes from 'prop-types'\nimport * as companyServices from './Company.services'\nimport * as companyConstants from './Company.constants'\nimport * as companyActions from './Company.actions'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { useParams } from 'react-router-dom'\nimport CompanyPage from './Company.page'\nimport { StatusCodes } from 'http-status-codes'\n\nconst Company = ({ children, company, setCompanyData }, { t: translate }) => {\n  const [pageState, setPageState] = useState(companyConstants.PAGE_STATE.LOADING)\n  const { companyHash } = useParams()\n\n  const updateCompanyData = () => {\n    if (company.status !== companyConstants.STATUS.OUTDATED) {\n      setPageState(companyConstants.PAGE_STATE.LOADING)\n    }\n\n    const NEW_PAGE_STATUS = {\n      [StatusCodes.NOT_FOUND]: companyConstants.PAGE_STATE.FAILED,\n      [StatusCodes.LOCKED]: companyConstants.PAGE_STATE.EXPIRED,\n      [StatusCodes.OK]: companyConstants.PAGE_STATE.LOADED,\n    }\n\n    const prevStatus = NEW_PAGE_STATUS[pageState]\n\n    companyServices\n      .getCompanyData(companyHash)\n      .then((response) => {\n        const newStatus = NEW_PAGE_STATUS[response.status] || companyConstants.PAGE_STATE.FAILED\n        if (newStatus !== prevStatus) {\n          setPageState(newStatus)\n        }\n\n        return response.json()\n      })\n      .then(setCompanyData)\n  }\n\n  React.useEffect(() => {\n    updateCompanyData()\n  }, [companyHash])\n\n  if (company.status === companyConstants.STATUS.OUTDATED) {\n    updateCompanyData()\n  }\n\n  return (\n    <CompanyPage state={pageState} translate={translate} data={company}>\n      {children}\n    </CompanyPage>\n  )\n}\n\nCompany.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  company: PropTypes.object,\n  setCompanyData: PropTypes.func,\n}\n\nCompany.contextTypes = {\n  t: PropTypes.func,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n}\n\nconst mapStateToProps = ({ company }) => ({\n  company,\n})\n\nconst mapDispatchToPros = (dispatch) =>\n  bindActionCreators(\n    {\n      setCompanyData: companyActions.setCompanyData,\n    },\n    dispatch,\n  )\n\nexport default connect(mapStateToProps, mapDispatchToPros)(withRouter(Company))\n","import React from 'react'\n\nimport * as PropTypes from 'prop-types'\nimport './Main.scss'\nimport 'react-tippy/dist/tippy.css'\nimport { Switch, Route } from 'react-router-dom'\n\nimport BackgroundImg from './background.png'\nimport LogoImg from './logo.svg'\n\nimport RoutesList from 'common/routes/RoutesList'\nimport BodyClasses from 'modules/main/BodyClasses'\nimport Company from 'modules/company/Company'\nimport * as generalConstants from 'common/utils/general.constants'\nimport NotFound from 'modules/main/NotFound'\n\nconst Main = (_, { t: translate }) => (\n  <BodyClasses>\n    <div className=\"app\" style={{ backgroundImage: `url(${BackgroundImg})` }}>\n      <div className=\"app__logo\">\n        <a href={generalConstants.BOOKSYS_REPO_URL}>\n          <img src={LogoImg} href alt={translate('Booksys logo')} />\n        </a>\n      </div>\n\n      <Switch>\n        <Route path=\"/:companyHash\">\n          <Company>\n            <RoutesList />\n          </Company>\n        </Route>\n\n        <Route>\n          <NotFound translate={translate} />\n        </Route>\n      </Switch>\n    </div>\n  </BodyClasses>\n)\n\nMain.defaultProps = {\n  translate: (value) => value,\n}\n\nMain.contextTypes = {\n  t: PropTypes.func,\n}\n\nexport default Main\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { HashRouter } from 'react-router-dom'\nimport I18n from 'redux-i18n'\nimport * as generalConstants from 'common/utils/general.constants'\nimport * as generalUtils from 'common/utils/general.utils'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport colors from 'colors'\nimport * as Sentry from '@sentry/react'\nimport { Integrations } from '@sentry/tracing'\n\nimport { translations } from 'common/locales/translations'\nimport configureStore from 'reducers/configureStore'\nimport Main from 'modules/main/Main'\n\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nconst { store, persistor } = configureStore()\n\nSentry.init({\n  dsn: generalConstants.SENTRY_URL,\n  integrations: [new Integrations.BrowserTracing()],\n  tracesSampleRate: 1.0,\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <I18n\n          translations={translations}\n          initialLang={generalUtils.detectBrowserLanguage()}\n          fallbackLang=\"en\"\n        >\n          <HashRouter>\n            <Main />\n          </HashRouter>\n        </I18n>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\nserviceWorker.unregister()\n\nsetTimeout(() => {\n  colors.enable()\n\n  console.log(colors.zalgo(generalConstants.BOOKSYS_CONSOLE_MESSAGE))\n  console.log(colors.random(generalConstants.BOOKSYS_CONSOLE_MESSAGE))\n}, 2000)\n","export const translations = {\n  en: {\n    Hello: 'world',\n  },\n  options: {\n    plural_rule: 'n > 1',\n    plural_number: '2',\n  },\n  pt: {\n    'One seat': 'Um assento',\n    'Event name': 'Nome do evento',\n    'Get directions': 'Ver direções',\n    'Clear field value': 'Limpar campo',\n    'Please wait ...': 'Por favor aguarde …',\n    'Time: {time}': 'Horário: {time}',\n    '{num} seats': '{num} assentos',\n    'Seats available: {seat}': 'Assentos disponíveis: {seat}',\n    Book: 'Agendar',\n    'Page {num}': 'Página {num}',\n    'Your email looks incorrect': 'Seu email está incorreto',\n    'This email is not acceptable, please make sure to use your corporate email':\n      'Esse email nāo é aceitável, por favor use o seu email corporativo',\n    'Congratulations! Your reservation has been successfully confirmed. Here is a brief summary of your booking details:':\n      'Parabéns! Sua reserva foi efetuada com sucesso. Veja abaixo um resumo do seu agendamento:',\n    'You cancelled your booking. Here is a brief summary of your cancelled booking details:':\n      'Você cancelou seu agendamento. Abaixo esta um resumo do agendamento cancelado:',\n    Confirmed: 'Confirmado',\n    Cancelled: 'Cancelado',\n    'Are you sure that you want to cancel your booking':\n      'Você tem certeza que deseja cancelar esse agendamento?',\n    'Something wrong happened': 'Algo inesperado aconteceu',\n    'Unable to find your booking': 'Nāo conseguimos encontrar seu agendamento',\n    \"Unfortunately the time that you selected isn't available anymore. Please select a new option below\":\n      'Infelizmente esse horário não esta mais disponível. Por favor selecione uma nova opção abaixo',\n    'Time/Seats filters': 'Filtros de horário / assentos',\n    'Select a time': 'Selecione um horário ',\n    'Number of seats': 'Numero de assentos',\n    'Available offices': 'Salas disponíveis',\n    'Navigate into available offices list': 'Navegue na lista de salas disponíveis ',\n    'Email illustration': 'Ilustração de email',\n    'Check your email': 'Verifique o seu email',\n    'You are almost there to reserve your room for this event! Please make sure to finish your reservation as soon as possible to avoid losing your booking.':\n      'Você esta quase la para reservar a sua sala nesse evento! Por favor se assegure de finalizar a sua reserva o quanto antes para evitar perder o seu agendamento.',\n    \"If you can't found the email, check your spam folder.\":\n      'Se você nāo encontrar o email, por favor verifique a sua caixa de spam.',\n    'New booking': 'Novo agendamento',\n    'This event has ended': 'Esse evento está encerrado',\n    'Fill in the details below to make your office reservation':\n      'Preencha seus detalhes abaixo para fazer a sua reserva de sala',\n    'Office reservation': 'Reserva de sala',\n    Name: 'Nome',\n    'Corporate email': 'E-mail corporativo',\n    'Book your preferences for this event': 'Defina as suas preferencias para esse evento',\n    'Preferred time': 'Horário preferido',\n    'Your booking preferences has changed': 'Suas preferencias de agendamento foram alteradas',\n    Continue: 'Continuar',\n    Time: 'Horário',\n    Office: 'Sala',\n    Seats: 'Assentos',\n    Cancel: 'Cancelar',\n    'Hey {name},': 'Oi {name},',\n    'Reservation code: {code}': 'Código de reserva: {code}',\n    'Booksys logo': 'Logo da Booksys',\n    'Image with a alien spaceship abducting somebody':\n      'Imagem com uma nave espacial abduzindo alguém',\n    'Page not found': 'Pagina nāo encontrada',\n  },\n}\n","module.exports = __webpack_public_path__ + \"static/media/something-wrong.19763570.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.26ad38f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.9adfa93a.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.e29d4d3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/email.ffaebffe.svg\";","module.exports = __webpack_public_path__ + \"static/media/NotFound.df523510.svg\";","module.exports = __webpack_public_path__ + \"static/media/companyCardBackground.b2695cc6.png\";"],"sourceRoot":""}